{
	"info": {
		"_postman_id": "de3b0f78-74e3-4c29-934f-6e0a3022584f",
		"name": "Test API Conciliador",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "VALIDAR LOGIN API",
			"item": [
				{
					"name": "01.Login Válido",
					"item": [
						{
							"name": "Validar Login CLIENTE USUÁRIO Válido OpenShift",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b409359e-10a4-4827-b834-6b980a158330",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Login DISTRIBUIDOR Válido OpenShift",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f587674-2380-4eb1-bdf8-35cc00cf0e9d",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Login GRUPO DE LOJAS Válido OpenShift",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e9f0167-04fe-4a54-a580-6f91f6cf42bb",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}\r\n//raizen"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22c51a90-b7fa-4a33-b53e-384635158fd9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e873511-edec-4fde-bec6-fd09179ba430",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "02.Login Vazio",
					"item": [
						{
							"name": "Validar Login com DADOS VAZIO NO USER E SENHA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "039bef74-c831-447c-b308-fb29ead0a18e",
										"exec": [
											"pm.test(\"Status code - BAD REQUEST\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"\",\r\n    \"password\":\"\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca43d62f-15e5-4d29-8e2c-4b5db9faed67",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "72f5ca62-cc4e-40d6-b65c-066c534f9a81",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "03.Login Válido senha Inválida",
					"item": [
						{
							"name": "Validar Login cliente usuário Válido SENHA INVALIDA OpenShift",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "687d8481-f0ac-44c7-a7fe-b450a5e75d56",
										"exec": [
											"pm.test(\"Status code is 'INVALID''\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@1xx\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e126187f-e192-4493-a521-5279cc7f22e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0df15c31-2f1f-43cb-a056-81257b2c0dd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "04.Login Data Validade < Permitido",
					"item": [
						{
							"name": "Validar login com permissão < data liberação",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43511298-9c3e-4480-b973-a9f6267cae62",
										"exec": [
											"pm.test(\"Status code is 'INVALID''\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"MSG fora do período is present\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.msg).to.include(\"a partir\");\r",
											"    console.log;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_usclt_validade\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "30367519-e8e9-4469-9ef1-59b8a90b70e3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7edb1b89-bd2b-4e0c-b543-97602c85b065",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "05.Login Data Validade FIM < data atual",
					"item": [
						{
							"name": "Validar login com permissão < data atual",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3d196d3-f1ac-4ed9-aa96-3d629390ac5e",
										"exec": [
											"pm.test(\"Status code is FORA DO PERÍODO\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"MSG fora do período esta presente corpo da resposta\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.msg).to.include(\"expirou\");\r",
											"    console.log;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_usclt_validadeultrapassada\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "972db884-4415-4aea-9e1b-c12f25628ffd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a79c894-86d6-4a15-b502-32602f34e5b2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "06.Login Excluído",
					"item": [
						{
							"name": "Validar Login DISTRIBUIDOR *EXCLUIDO* OpenShift",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "848e4f7e-a1bc-4fe2-adf6-9693ffed340a",
										"exec": [
											"pm.test(\"Status code is 'INVALID''\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_dist_excluido\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a875a008-a38e-424d-80f8-df614a19c436",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19d1012e-1088-4aa0-8a05-3cc4c54618db",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "750c4f9b-6c01-4e11-a407-2ebcb4c2eb76",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5fcfd5a0-7985-4d0d-9833-057c07962314",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR BUSCA REDE",
			"item": [
				{
					"name": "01.Validar Token",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52f2b1d0-3f13-4255-91b5-d5d554f1570a",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gerar Token Perfil Distribuidor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "321b61c4-4950-4d85-958c-eef7abc2407a",
										"exec": [
											"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gerar Token Perfil GRUPO de Lojas",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ba45c3f-3901-44ae-a2be-7384d0d08444",
										"exec": [
											"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
									"protocol": "https",
									"host": [
										"conciliation-identity-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bbffe465-310f-4613-9adc-521cfb08a0f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d14899a5-53aa-4475-b50b-4c2cc0d7a62c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "02.Busca Sem Parametro",
					"item": [
						{
							"name": "Validar Busca Perfil CLIENTE SEM PARÂMETRO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd2d0ade-2aef-48c0-aab2-cfff29d532d3",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil DISTRIBUIDOR  SEM PARÂMETRO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57217ff6-9813-45a1-a960-ccd55af4b3ef",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenPerfilDistribuidor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil GLOJAS SEM PARÂMETRO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c459c1df-f0bb-4e31-9d9b-7445a5d918a1",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "102b439f-ae83-463a-b104-e8e829a72c55",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ff1b76b-525c-4413-a814-0719811cc821",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "03.Busca por Nome",
					"item": [
						{
							"name": "Validar Busca Perfil CLIENTE POR NOME INCOMPLETO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "935937e3-dbd9-4924-91a2-de21d0d996cb",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?name=B2W",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil DISTRIBUIDOR POR NOME INCOMPLETO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e166ac4-5b3f-451c-a21b-c06f79170001",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?name=GAS",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "GAS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil CLIENTE POR NOME COMPLETO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74b43214-64e6-49f0-81c3-fbb4d702de6c",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?name=B2W - COMPANHIA DIGITAL",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - COMPANHIA DIGITAL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil DISTRIBUIDOR POR NOME COMPLETO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e1dc8dd-344e-4850-99b3-bbeea2d85c56",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?name=REDE GAS GAS",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "REDE GAS GAS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil GLOJAS POR NOME COMPLETO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9efce90-593b-4eb9-af49-172f2ea6863a",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?name=REDE GAS GAS",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "REDE GAS GAS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil GLOJAS POR NOME INCOMPLETO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a585f595-8cd7-4607-99a9-c2e025532e0d",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?name=REDE",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "REDE"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ccacfd4-c65e-4bcf-8c0d-9b71be03fa09",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "97e6d6a8-c882-4b4b-b31a-e79af7084647",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "04.Busca por Code",
					"item": [
						{
							"name": "Validar Busca Perfil CLIENTE POR CODE VÁLIDO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea2574b4-7109-4540-93e7-acd9e59d8a3f",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?code=4692",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "code",
											"value": "4692"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil GLOJAS POR CODE VÁLIDO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "310f6186-09e9-43b8-ac8b-bdadb89e8df3",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?code=4601",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "code",
											"value": "4601"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil GLOJAS POR CODE INVÁLIDO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0139c1a-fb74-4404-b616-f4eca6509467",
										"exec": [
											"pm.test(\"Status code is 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body is empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?code=99999999",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "code",
											"value": "99999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil DISTRIBUIDOR por code VÁLIDO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f103603b-a0be-4219-b471-32f82a608577",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?code=4601",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "code",
											"value": "4601"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil DISTRIBUIDOR por code INVÁLIDO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d68bc7f9-e34e-49d6-9b62-f8d545b6cd7c",
										"exec": [
											"pm.test(\"Status code is 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body is empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?code=9999999",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "code",
											"value": "9999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil CLIENTE POR CODE INVÁLIDO de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3de21f16-24fe-430d-8ba6-327e48deb56e",
										"exec": [
											"pm.test(\"Status code is 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?code=999999",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "11",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "code",
											"value": "999999"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b4cc7a40-a344-4200-bc61-03244ba4db5c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f7e74886-7206-466c-941d-7f35425d62a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "05.Busca por Status Active",
					"item": [
						{
							"name": "Validar Busca Perfil CLIENTE POR STATUS ACTIVE true de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d01b070f-812b-4a41-9c21-5bb47b0abd31",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?active=true",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "active",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil DISTRIBUIDOR POR STATUS ACTIVE true de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5446e8ef-bda3-49a7-b596-b9c26f744c2d",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?active=true",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "active",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil GLOJAS POR STATUS ACTIVE true de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bac55a2-3208-40de-af08-dd83503672a8",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).not.to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?active=true",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "active",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil GLOJAS POR STATUS ACTIVE false de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c682fb47-245d-4b6a-abfc-dafd8a346c69",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body is empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?active=false",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "active",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil DISTRIBUIDOR POR STATUS ACTIVE false de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fad1900d-9fd2-4b07-bd2f-f9bbcd2e7c03",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn´t empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?active=false",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "active",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Busca Perfil CLIENTE POR STATUS ACTIVE false de rede",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4df29c8f-c00f-4321-9f7d-b72142a786fd",
										"exec": [
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test(\"Body isn´t empty - 'Content' = \" + data.content.length, function () {\r",
											"    pm.expect(data.content.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://conciliation-register-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/chains?active=false",
									"protocol": "https",
									"host": [
										"conciliation-register-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"chains"
									],
									"query": [
										{
											"key": "code",
											"value": "9999999999",
											"disabled": true
										},
										{
											"key": "name",
											"value": "B2W - Companhia Digital",
											"disabled": true
										},
										{
											"key": "id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "active",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR BUSCA LOJA",
			"item": [
				{
					"name": "Gerar Token Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20a37c28-8de1-4c9a-bce6-ff9873feb4af",
								"exec": [
									"var token = JSON.parse(responseBody);\r",
									"pm.globals.set(\"token\", token.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil DISTRIBUIDOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92309617-a96d-4e3f-9702-8fc408d2a4db",
								"exec": [
									"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil GRUPO LOJAS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e1356ad-1853-4fd5-8503-8e12f6bc98ea",
								"exec": [
									"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
							"protocol": "https",
							"host": [
								"conciliation-identity-ms-portal-auttar-des",
								"openshift-dev",
								"getnet",
								"com",
								"br"
							],
							"path": [
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b110deb6-643e-46aa-b49b-b274b4f7acd8",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
									"    pm.expect(data.content.length).not.to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/stores",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Cliente POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81e7a5ea-9932-4a40-9266-753f0f981e48",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"var dataId = pm.response.json();\r",
									"pm.test(\"ID isn't empty - 'ID' = \" + dataId.id, function () {\r",
									"    pm.expect(dataId.id.length).not.to.equal(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/stores/82130",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"stores",
								"82130"
							],
							"query": [
								{
									"key": "id",
									"value": "82130",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Distribuidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d0f186c-6c55-4380-914e-5f425d415e70",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
									"    pm.expect(data.content.length).not.to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/stores",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Distribuidor POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9088644d-54ac-4369-b52e-e98ffe8ac661",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var dataId = pm.response.json();\r",
									"pm.test(\"ID isn't empty - 'ID' = \" + dataId.id, function () {\r",
									"    pm.expect(dataId.id.length).not.to.equal(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/stores/8914",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"stores",
								"8914"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Grupo Loja",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a818819e-f2b4-4164-8eba-0c23b523b30e",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
									"    pm.expect(data.content.length).not.to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/stores",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"stores"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fb7bdda4-ce1d-4068-9ed3-2c1f07248a3f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3488109b-a5f2-42c3-aaa3-9974e935c3d1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR BUSCA EMPRESAS REGISTRADAS",
			"item": [
				{
					"name": "Gerar Token Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f635b211-18fe-45e9-a02c-ad8c6b74636e",
								"exec": [
									"var token = JSON.parse(responseBody);\r",
									"pm.globals.set(\"token\", token.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil DISTRIBUIDOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6319313-fb2a-4755-a5cf-29a600f19836",
								"exec": [
									"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil GRUPO LOJAS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80aad2c6-1404-453c-9184-dab091c49234",
								"exec": [
									"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://conciliation-identity-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/authorizations",
							"protocol": "https",
							"host": [
								"conciliation-identity-ms-portal-auttar-des",
								"openshift-dev",
								"getnet",
								"com",
								"br"
							],
							"path": [
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d150b2ac-aed6-4713-90a8-0e1539a45c34",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
									"    pm.expect(data.content.length).not.to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/companies",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Cliente POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69eb502a-fd18-4839-99c9-31bce86745a8",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var dataId = pm.response.json();\r",
									"pm.test(\"ID isn't empty - 'ID' = \" + dataId.id, function () {\r",
									"    pm.expect(dataId.id.length).not.to.equal(0);\r",
									"});\r",
									"\r",
									"var dataChainId = pm.response.json();\r",
									"pm.test(\"ChainID isn't empty - 'ChainID' = \" + dataChainId.chain_id, function () {\r",
									"    pm.expect(dataChainId.chain_id.length).not.to.equal(0);\r",
									"});\r",
									"\r",
									"var dataName = pm.response.json();\r",
									"pm.test(\"Name isn't empty - 'Name' = \" + dataName.name, function () {\r",
									"    pm.expect(dataName.name.length).not.to.equal(0);\r",
									"});\r",
									"\r",
									"var dataCode = pm.response.json();\r",
									"pm.test(\"code isn't empty - 'Code' = \" + dataCode.code, function () {\r",
									"    pm.expect(dataCode.code.length).not.to.equal(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/companies/44072",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"companies",
								"44072"
							],
							"query": [
								{
									"key": "id",
									"value": "82130",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Distribuidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fe71630-1a8b-41a2-9bc3-75ae04f4d1f6",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
									"    pm.expect(data.content.length).not.to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/companies",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Distribuidor POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4b0ac02-aa4b-445c-b95e-5d0367540a05",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var dataId = pm.response.json();\r",
									"pm.test(\"ID isn't empty - 'ID' = \" + dataId.id, function () {\r",
									"    pm.expect(dataId.id.length).not.to.equal(0);\r",
									"});\r",
									"\r",
									"\r",
									"var dataName = pm.response.json();\r",
									"pm.test(\"Name isn't empty - 'Name' = \" + dataName.name, function () {\r",
									"    pm.expect(dataName.name.length).not.to.equal(0);\r",
									"});\r",
									"\r",
									"var dataCode = pm.response.json();\r",
									"pm.test(\"code isn't empty - 'Code' = \" + dataCode.code, function () {\r",
									"    pm.expect(dataCode.code.length).not.to.equal(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/companies/14002",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"companies",
								"14002"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Grupo Loja",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbf003ea-adf8-42e9-b373-b3a562f34993",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.test(\"Body isn't empty - 'Content' = \" + data.content.length, function () {\r",
									"    pm.expect(data.content.length).not.to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/companies",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Grupo Loja POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb0ed40e-5070-4af2-975b-6021af8500fd",
								"exec": [
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var dataId = pm.response.json();\r",
									"pm.test(\"ID isn't empty - 'ID' = \" + dataId.id, function () {\r",
									"    pm.expect(dataId.id.length).not.to.equal(0);\r",
									"});\r",
									"\r",
									"var dataName = pm.response.json();\r",
									"pm.test(\"Name isn't empty - 'Name' = \" + dataName.name, function () {\r",
									"    pm.expect(dataName.name.length).not.to.equal(0);\r",
									"});\r",
									"\r",
									"var dataCode = pm.response.json();\r",
									"pm.test(\"code isn't empty - 'Code' = \" + dataCode.code, function () {\r",
									"    pm.expect(dataCode.code.length).not.to.equal(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/companies/14002",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"companies",
								"14002"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ee438f6d-c749-4193-964b-9fba41252a8d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "13171b46-3250-4433-84da-3fb872d2d89c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR BUSCA ADQUIRENTES",
			"item": [
				{
					"name": "Gerar Token Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82d54d0f-c904-449d-b224-62ad0ac6d1c6",
								"exec": [
									"var token = JSON.parse(responseBody);\r",
									"pm.globals.set(\"token\", token.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil DISTRIBUIDOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f0daa85-8ad8-4a61-a057-9fb0ef207ecd",
								"exec": [
									"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil GRUPO LOJAS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26134dfc-35d2-49cd-acf7-b9540ace4866",
								"exec": [
									"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69d3df95-58b2-4f03-a85d-f6c326ae6076",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Cielo\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.content[0].code, () => {\r",
									"    pm.expect(dataCode.content[0].code).to.equal(\"03\");\r",
									"});   \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/acquirers",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"acquirers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Cliente POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5f99bcc-3471-4bb5-a111-6c10ec1d0511",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4);\r",
									"});   \r",
									"\r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Cielo\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.code, () => {\r",
									"    pm.expect(dataCode.code).to.equal(\"03\");\r",
									"});   \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/acquirers/4",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"acquirers",
								"4"
							],
							"query": [
								{
									"key": "id",
									"value": "82130",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Distribuidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7af477f6-993b-4e86-b2b1-75f84f79fa9e",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Cielo\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.content[0].code, () => {\r",
									"    pm.expect(dataCode.content[0].code).to.equal(\"03\");\r",
									"});   \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/acquirers/",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"acquirers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Distribuidor POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24072ebd-5601-48b7-9bbc-a8a48d306cfe",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4);\r",
									"});   \r",
									"\r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Cielo\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.code, () => {\r",
									"    pm.expect(dataCode.code).to.equal(\"03\");\r",
									"});   \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/acquirers/4",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"acquirers",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Grupo Loja",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67fa9f5a-20bb-4abe-8e79-990c992245e1",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Cielo\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.content[0].code, () => {\r",
									"    pm.expect(dataCode.content[0].code).to.equal(\"03\");\r",
									"});   \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/acquirers/?sort=name",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"acquirers",
								""
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Loja Perfil Grupo Loja POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7887e056-61fa-4b68-9078-871e363041d8",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4);\r",
									"});   \r",
									"\r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Cielo\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.code, () => {\r",
									"    pm.expect(dataCode.code).to.equal(\"03\");\r",
									"});   \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/acquirers/4",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"acquirers",
								"4"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6036efc5-cac4-4414-b4db-116d5c5f3a00",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1446f213-c107-47f6-9f10-c7b74b070666",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR BUSCA DE BANDEIRAS",
			"item": [
				{
					"name": "Gerar Token Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a1fd60b-b596-4d5b-9d5d-7111323083bc",
								"exec": [
									"var token = JSON.parse(responseBody);\r",
									"pm.globals.set(\"token\", token.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil DISTRIBUIDOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2abca4d5-e701-473d-9d18-ef16648411b0",
								"exec": [
									"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil GRUPO LOJAS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcc42f48-f85b-416e-bcef-bef000894a2a",
								"exec": [
									"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ee553ee-b46a-47da-935c-3fa5adf7f24d",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4700);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"B2W - Companhia Digital\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.content[0].code, () => {\r",
									"    pm.expect(dataCode.content[0].code).to.equal(4692);\r",
									"});   \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/chains",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"chains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Cliente POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dccd39c-6b63-42ca-bf11-75b16906927d",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4700);\r",
									"});   \r",
									"\r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"B2W - Companhia Digital\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.code, () => {\r",
									"    pm.expect(dataCode.code).to.equal(4692);\r",
									"});   \r",
									"\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/chains/4700",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"chains",
								"4700"
							],
							"query": [
								{
									"key": "id",
									"value": "82130",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Distribuidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe001c2-d1af-4ce2-af34-d74391eb53c6",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4606);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"REDE GAS GAS\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.content[0].code, () => {\r",
									"    pm.expect(dataCode.content[0].code).to.equal(4601);\r",
									"});   \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/chains",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"chains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Distribuidor POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afcfb2c0-976a-4f2b-bffb-f79bcabbbff2",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4606);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"REDE GAS GAS\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.code, () => {\r",
									"    pm.expect(dataCode.code).to.equal(4601);\r",
									"});   \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/chains/4606",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"chains",
								"4606"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Grupo Loja",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df067018-dac5-4959-b06d-dc9e5bbf02d8",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4606);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"REDE GAS GAS\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.content[0].code, () => {\r",
									"    pm.expect(dataCode.content[0].code).to.equal(4601);\r",
									"});   \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/chains",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"chains"
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Grupo Loja POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08be78f2-6e68-438d-a093-6b4a57f5fb41",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4606);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"REDE GAS GAS\");\r",
									"}); \r",
									"\r",
									"var dataCode = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the CODE is present and to equal CODE: \" +dataCode.code, () => {\r",
									"    pm.expect(dataCode.code).to.equal(4601);\r",
									"});   \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/chains/4606",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"chains",
								"4606"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f1dd6748-614c-421a-8b58-3bcabd2b24ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "de77e9be-36ce-4d7a-91f6-d402f421c0ed",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR BUSCA DE MODALIDADES/PRODUTOS",
			"item": [
				{
					"name": "Gerar Token Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1569557-27c0-4807-9e0b-ee32d4cf57bf",
								"exec": [
									"var token = JSON.parse(responseBody);\r",
									"pm.globals.set(\"token\", token.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil DISTRIBUIDOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71dbc22b-68cc-4e86-a154-0cb3628d6865",
								"exec": [
									"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil GRUPO LOJAS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "204684fd-25fb-43a4-94bb-9f35c565b9d1",
								"exec": [
									"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Modalidades/Produtos do Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42090d33-34e8-494b-a830-fab8fc3e640b",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4483);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Débito em Pagamento de Carnê\");\r",
									"}); \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/modalities",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"modalities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Modalidades/Produtos do Perfil Cliente por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c6e603a-6918-4422-96ca-8ca8dc4578f8",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4483);\r",
									"});   \r",
									"\r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Débito em Pagamento de Carnê\");\r",
									"}); \r",
									"\r",
									"\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/modalities/4483",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"modalities",
								"4483"
							],
							"query": [
								{
									"key": "id",
									"value": "82130",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Distribuidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02414e2d-c150-44c3-8e6d-403bff6df50e",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4471);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Recarga\");\r",
									"}); \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/modalities/",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"modalities",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Distribuidor POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c031f03-2384-4e7f-8ec8-08bb3c5069b7",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4471);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Recarga\");\r",
									"}); \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/modalities/4471",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"modalities",
								"4471"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Grupo Loja",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b6db09b-1cb7-4a66-b800-311f0e3d3ff2",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4471);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Recarga\");\r",
									"}); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/modalities/",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"modalities",
								""
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca bandeira Perfil Grupo Loja POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e84dbb22-8661-443e-8ee1-568140d912db",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4471);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Recarga\");\r",
									"}); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/modalities/4471",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"modalities",
								"4471"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a9c8f414-1436-49e8-ac5f-0883464ddd43",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "67e5b229-a150-4757-8802-e54c9ee8227d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR BUSCA DE MEIOS DE CAPTURA",
			"item": [
				{
					"name": "Gerar Token Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f227ab78-363d-4fc3-91aa-5badc459c324",
								"exec": [
									"var token = JSON.parse(responseBody);\r",
									"pm.globals.set(\"token\", token.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil DISTRIBUIDOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77e571ef-3e6a-46e4-a822-90ecf1cc7751",
								"exec": [
									"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerar Token Perfil GRUPO LOJAS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8405b8c7-02c1-4bf7-984c-e9e887cfe1e5",
								"exec": [
									"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
									"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
						},
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"authorizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Meios de Captura Perfil Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e33479d-1d19-4483-b7dc-994140d41f34",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4475);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Meio Teste Captura\");\r",
									"}); \r",
									"\r",
									"var dataTef_Cod = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the TEF_COD is present and to equal NAME: \" +dataTef_Cod.content[0].tef_cod, () => {\r",
									"       pm.expect(dataName.content[0].tef_cod).to.equal(\"12\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/capture-methods",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"capture-methods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Meios de Captura Perfil Cliente por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a7eeb9f-34df-459c-8bb9-1ff981d0349f",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4475);\r",
									"});   \r",
									"\r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Meio Teste Captura\");\r",
									"}); \r",
									"\r",
									"var dataTef_Cod = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the TEF_COD is present and to equal NAME: \" +dataTef_Cod.tef_cod, () => {\r",
									"       pm.expect(dataName.tef_cod).to.equal(\"12\");\r",
									"});\r",
									"\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/capture-methods/4475",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"capture-methods",
								"4475"
							],
							"query": [
								{
									"key": "id",
									"value": "82130",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Meios de Captura Perfil Distribuidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "189cb731-5d24-4f12-a907-a4e89eda52a9",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4475);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Meio Teste Captura\");\r",
									"}); \r",
									"\r",
									"var dataTef_Cod = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the TEF_COD is present and to equal NAME: \" +dataTef_Cod.content[0].tef_cod, () => {\r",
									"       pm.expect(dataName.content[0].tef_cod).to.equal(\"12\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/capture-methods",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"capture-methods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Meios de Captura Perfil Distribuidor POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a97ad36-0954-4cbc-a078-d7abc9edb15f",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4475);\r",
									"});   \r",
									"\r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Meio Teste Captura\");\r",
									"}); \r",
									"\r",
									"var dataTef_Cod = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the TEF_COD is present and to equal NAME: \" +dataTef_Cod.tef_cod, () => {\r",
									"       pm.expect(dataName.tef_cod).to.equal(\"12\");\r",
									"});\r",
									"\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilDistribuidor}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/capture-methods/4475",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"capture-methods",
								"4475"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Meios de Captura Perfil Grupo Loja",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "801b9a10-71c5-446c-8aab-b2ed6e74d3a0",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.content[0].id, () => {\r",
									"    pm.expect(data.content[0].id).to.equal(4475);\r",
									"});   \r",
									" \r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.content[0].name, () => {\r",
									"       pm.expect(dataName.content[0].name).to.equal(\"Meio Teste Captura\");\r",
									"}); \r",
									"\r",
									"var dataTef_Cod = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the TEF_COD is present and to equal NAME: \" +dataTef_Cod.content[0].tef_cod, () => {\r",
									"       pm.expect(dataName.content[0].tef_cod).to.equal(\"12\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/capture-methods",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"capture-methods"
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar busca Meios de Captura Perfil Grupo Loja POR ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55a07314-1c20-49c1-8bff-73b7de25d12f",
								"exec": [
									"\r",
									"pm.test(\"Status code is 'OK''\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the ID is present - ID: \" +data.id, () => {\r",
									"    pm.expect(data.id).to.equal(4471);\r",
									"});   \r",
									"\r",
									"var dataName = JSON.parse(responseBody);\r",
									"pm.test(\"Validate if the NAME is present and to equal NAME: \" +dataName.name, () => {\r",
									"       pm.expect(dataName.name).to.equal(\"Recarga\");\r",
									"}); \r",
									"\r",
									"\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tokenPerfilGLojas}}"
							}
						],
						"url": {
							"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/modalities/4471",
							"protocol": "https",
							"host": [
								"api-hg",
								"getnet",
								"com",
								"br"
							],
							"port": "8443",
							"path": [
								"conciliation",
								"v1",
								"modalities",
								"4471"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "44f591f4-ed46-4f35-bcc6-c546bf2bbdd9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2eec5514-9f8c-4203-b6f1-dfdbbeff46f6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CONSULTA TRANSAÇÕES/CONCILIAÇÕES",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc3f9cd4-6a05-4430-8463-c27d0dfffb9c",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar ERRO busca Transação_Conciliação sem parâmetros",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4731c509-0bd3-44e7-aea0-c5cfc2de87c6",
										"exec": [
											"\r",
											"pm.test(\"Status code no parameters is 'Not Found''\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ID is present - ID: \" +data.message, () => {\r",
											"   pm.expect(data.message).to.equal(\"Not Found\");\r",
											"});   \r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation//v1/transactions",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"",
										"v1",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param Chain_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "545e0e4c-add2-4491-866f-bda1f276c13e",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param company_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b9251e7-a534-4b86-8033-f371aeb7d189",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&company_id=44072",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "44072"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param store_ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39588cc1-73b9-48d7-87ba-8600804c9053",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&store_ids=82132",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "82132"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar ERRO busca Transação_Conciliação perfil Cliente Param acquirer_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b971ade1-a033-49cd-94a3-7bdee3d091ae",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'BAD REQUEST''\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.expect(responseJson.msg).to.eql(\"É obrigatório informar Rede, empresa ou lojas.\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&acquirer_id=1",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param acquirer_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66caa75b-4459-4c74-8e8a-610974e3722a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&acquirer_id=1",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param brand_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64acd2c8-0397-408c-ae40-9235c99b2835",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&brand_id=4502",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param modality_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e7e5e1c-be9a-43e9-ab9a-97dd362219fa",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&modality_id=4469",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param capture_type INT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9585a4e-18c8-4c10-bb9b-d98b340d4644",
										"exec": [
											"/*let skipTest = pm.environment.get('skipTest')\r",
											"\r",
											"(skipTest ? pm.test.skip : pm.test)(\"Check status code\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"*/\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&capture_type=INT",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT"
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param order_id (SKIPED!!!)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "738b8a38-b479-4399-b6b3-cc5aa0a02f5d",
										"exec": [
											"/*let skipTest = pm.environment.get('skipTest')\r",
											"\r",
											"(skipTest ? pm.test.skip : pm.test)(\"Check status code\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"*/\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-03-05T03:51:04Z&end_date=2018-03-06T00:00:00Z&chain_id=4700&store_ids=82132",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-03-05T03:51:04Z"
										},
										{
											"key": "end_date",
											"value": "2018-03-06T00:00:00Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param mv_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84e4bd72-db8d-42f9-9820-d2f5cd5af7cf",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&mv_status=CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param mf_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e3982d4-a404-4c60-a705-45ddf6608759",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&mf_status=AUTOMATICALLY_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param trs_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c695195d-6567-401c-a20c-5cfdab73de7b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&trs_status=APPROVED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param plan_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc176700-2f87-49a6-9b00-53d533ca8ddd",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&plan_type=ROTATING",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "ROTATING"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param pdv_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b3a6a8b-b7ba-47e0-a07a-f30638c12b62",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee_AMOUNT is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&pdv_number=012",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "ROTATING",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "147659751",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "535530247",
											"disabled": true
										},
										{
											"key": "pdv_number",
											"value": "012"
										},
										{
											"key": "pos_number",
											"value": "4097065",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param pos_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31284b8e-f31e-4cea-8573-846292a331fc",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee_AMOUNT is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&pos_number=4097065",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "ROTATING",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "147659751",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "535530247",
											"disabled": true
										},
										{
											"key": "pdv_number",
											"value": "012",
											"disabled": true
										},
										{
											"key": "pos_number",
											"value": "4097065"
										},
										{
											"key": "tef_nsu",
											"value": "217925181",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param tef_nsu",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81ab187b-13c5-4fbf-84ad-019c80dd8f27",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee_AMOUNT is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&tef_nsu=217925181",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "ROTATING",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "147659751",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "535530247",
											"disabled": true
										},
										{
											"key": "pdv_number",
											"value": "012",
											"disabled": true
										},
										{
											"key": "pos_number",
											"value": "4097065",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "217925181"
										},
										{
											"key": "tax_coupon",
											"value": "0658876973",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param tax_coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35478b8d-2748-4c2c-9be8-223a4ebef16a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee_AMOUNT is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&tef_nsu=217925181",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "ROTATING",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "147659751",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "535530247",
											"disabled": true
										},
										{
											"key": "pdv_number",
											"value": "012",
											"disabled": true
										},
										{
											"key": "pos_number",
											"value": "4097065",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "217925181"
										},
										{
											"key": "tid",
											"value": "3497404402180011",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param tid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "306e8f98-2ee4-4575-8bd5-c9b971a23c97",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee_AMOUNT is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&tid=3497404402180011",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "ROTATING",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "147659751",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "535530247",
											"disabled": true
										},
										{
											"key": "pdv_number",
											"value": "012",
											"disabled": true
										},
										{
											"key": "pos_number",
											"value": "4097065",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "217925181",
											"disabled": true
										},
										{
											"key": "tid",
											"value": "3497404402180011"
										},
										{
											"key": "terminal_number",
											"value": "D4430220",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param terminal_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd4c7931-83d3-4e03-bb18-91c6427b7e56",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee_AMOUNT is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&terminal_number=D4430220",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "ROTATING",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "147659751",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "535530247",
											"disabled": true
										},
										{
											"key": "pdv_number",
											"value": "012",
											"disabled": true
										},
										{
											"key": "pos_number",
											"value": "4097065",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "217925181",
											"disabled": true
										},
										{
											"key": "tid",
											"value": "3497404402180011",
											"disabled": true
										},
										{
											"key": "terminal_number",
											"value": "D4430220"
										},
										{
											"key": "size",
											"value": "20",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b92c4a9b-713a-434d-830a-a30f68648ab0",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee_AMOUNT is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "INT",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "trs_status",
											"value": "APPROVED",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "ROTATING",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "147659751",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "535530247",
											"disabled": true
										},
										{
											"key": "pdv_number",
											"value": "012",
											"disabled": true
										},
										{
											"key": "pos_number",
											"value": "4097065",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "217925181",
											"disabled": true
										},
										{
											"key": "tid",
											"value": "3497404402180011",
											"disabled": true
										},
										{
											"key": "terminal_number",
											"value": "D4430220",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"disabled": true
										},
										{
											"key": "page",
											"value": null,
											"disabled": true
										},
										{
											"key": "sort",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Param capture_type POS (SKIPED)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7e9fab5-5a20-40cd-bad4-eaf8d1027230",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2018-01-01T00:00:00Z&end_date=2018-01-01T23:59:59Z&chain_id=4700&modality_id=4469",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2018-01-01T00:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2018-01-01T23:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469"
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Busca PATH Conciliation_id e date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12325a4b-f8da-413f-9e2d-c12518545db0",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present - ID: \" +dataTransaction.transaction_acquirer.acquirer_trs_id, () => {\r",
											"    pm.expect(dataTransaction.transaction_acquirer.acquirer_trs_id).to.equal(dataTransaction.transaction_acquirer.acquirer_trs_id);\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present - ID: \" +dataTransaction.transaction_acquirer.acquirer_trs_date, () => {\r",
											"    pm.expect(dataTransaction.transaction_acquirer.acquirer_trs_date).to.equal(dataTransaction.transaction_acquirer.acquirer_trs_date);\r",
											"});  \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const conteudoTef_nsu = dataTransaction.transaction_acquirer.tef_nsu;\r",
											"pm.test(\"Validate if the tef_nsu is present - ID: \" +conteudoTef_nsu, () => {\r",
											"    pm.expect(conteudoTef_nsu).to.equal(dataTransaction.transaction_acquirer.tef_nsu);\r",
											"});  \r",
											"\r",
											"var dataTransaction2 = JSON.parse(responseBody);\r",
											"const conteudoIsNumber = dataTransaction2.transaction_acquirer.tef_nsu;\r",
											"pm.test(\"Validate if the tef_nsu is not empty: \" +conteudoIsNumber, () => {\r",
											"    if (pm.expect(conteudoIsNumber).to.be.a('number')){\r",
											"        pm.test(\"Yes, tef_nsu is not empty and is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_nsu = dataTransaction.transaction_acquirer.acquirer_nsu;\r",
											"pm.test(\"Validate if the acquirer_nsu is not empty and your content is [\"+contentAcquirer_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_reject_nsu = dataTransaction.transaction_acquirer.acquirer_reject_nsu;\r",
											"pm.test(\"Validate if the acquirer_nsu is not empty and your content is [\"+contentAcquirer_reject_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_reject_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_reject_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_reject_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											" \r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthorization_code = dataTransaction.transaction_acquirer.authorization_code;\r",
											"pm.test(\"Validate if the authorization_code is not empty and your content is [\"+contentAuthorization_code+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_reject_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, authorization_code is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, authorization_code is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTransaction_info = dataTransaction.transaction_acquirer.transaction_info;\r",
											"pm.test(\"Validate if the transaction_info is not empty and your content is [\"+contentTransaction_info+\"]\", () => {\r",
											"    if (pm.expect(contentTransaction_info).to.be.a('string')){\r",
											"        pm.test(\"Yes, transaction_info is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, transaction_info is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAmount = dataTransaction.transaction_acquirer.amount;\r",
											"pm.test(\"Validate if the amount is not empty and your content is [\"+contentAmount+\"]\", () => {\r",
											"    if (pm.expect(contentAmount).to.be.a('number')){\r",
											"        pm.test(\"Yes, amount is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, amount is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentInstallments_number = dataTransaction.transaction_acquirer.installments_number;\r",
											"pm.test(\"Validate if the installments_number is not empty and your content is [\"+contentInstallments_number+\"]\", () => {\r",
											"    if (pm.expect(contentInstallments_number).to.be.a('number')){\r",
											"        pm.test(\"Yes, installments_number is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, installments_number is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStatus = dataTransaction.transaction_acquirer.status;\r",
											"pm.test(\"Validate if the status is not empty and your content is [\"+contentStatus+\"]\", () => {\r",
											"    if (pm.expect(contentStatus).to.be.a('string')){\r",
											"        pm.test(\"Yes, status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPos_number = dataTransaction.transaction_acquirer.pos_number;\r",
											"pm.test(\"Validate if the pos_number is not empty and your content is [\"+contentPos_number+\"]\", () => {\r",
											"    if (pm.expect(contentPos_number).to.be.a('number')){\r",
											"        pm.test(\"Yes, pos_number is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, pos_number is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTerminal_number = dataTransaction.transaction_acquirer.terminal_number;\r",
											"pm.test(\"Validate if the terminal_number is not empty and your content is [\"+contentTerminal_number+\"]\", () => {\r",
											"    if (pm.expect(contentTransaction_info).to.be.a('string')){\r",
											"        pm.test(\"Yes, terminal_number is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, terminal_number is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_date = dataTransaction.transaction_acquirer.capture_date;\r",
											"pm.test(\"Validate if the capture_date is not empty and your content is [\"+contentCapture_date+\"]\", () => {\r",
											"    if (pm.expect(contentCapture_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, capture_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, capture_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerId = dataTransaction.transaction_acquirer.acquirer.id;\r",
											"pm.test(\"Validate if the contentAcquirerId is not empty and your content is [\"+contentAcquirerId+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirerId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirerId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerName = dataTransaction.transaction_acquirer.acquirer.name;\r",
											"pm.test(\"Validate if the AcquirerName is not empty and your content is [\"+contentAcquirerName+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerName).to.be.a('string')){\r",
											"        pm.test(\"Yes, AcquirerName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, AcquirerName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerCode = dataTransaction.transaction_acquirer.acquirer.code;\r",
											"pm.test(\"Validate if the contentAcquirerCode is not empty and your content is [\"+contentAcquirerCode+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerCode).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirerCode is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirerCode is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandId = dataTransaction.transaction_acquirer.brand.id;\r",
											"pm.test(\"Validate if the contentBrandId is not empty and your content is [\"+contentBrandId+\"]\", () => {\r",
											"    if (pm.expect(contentBrandId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentBrandId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandName = dataTransaction.transaction_acquirer.brand.name;\r",
											"pm.test(\"Validate if the contentBrandName is not empty and your content is [\"+contentBrandName+\"]\", () => {\r",
											"    if (pm.expect(contentBrandName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentBrandName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandCode = dataTransaction.transaction_acquirer.brand.code;\r",
											"pm.test(\"Validate if the contentBrandCode is not empty and your content is [\"+contentBrandCode+\"]\", () => {\r",
											"    if (pm.expect(contentBrandCode).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentBrandCode is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandCode is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityId = dataTransaction.transaction_acquirer.modality.id;\r",
											"pm.test(\"Validate if the contentModalityId is not empty and your content is [\"+contentModalityId+\"]\", () => {\r",
											"    if (pm.expect(contentModalityId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentModalityId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentModalityId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityName = dataTransaction.transaction_acquirer.modality.name;\r",
											"pm.test(\"Validate if the contentModalityName is not empty and your content is [\"+contentModalityName+\"]\", () => {\r",
											"    if (pm.expect(contentModalityName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentModalityName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentModalityName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreName = dataTransaction.transaction_acquirer.store.name;\r",
											"pm.test(\"Validate if the contentStoreName is not empty and your content is [\"+contentStoreName+\"]\", () => {\r",
											"    if (pm.expect(contentStoreName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStoreName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStoreName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCnpj = dataTransaction.transaction_acquirer.store.cnpj;\r",
											"pm.test(\"Validate if the contentStoreCnpj is not empty and your content is [\"+contentStoreCnpj+\"]\", () => {\r",
											"    if (pm.expect(contentStoreCnpj).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStoreCnpj is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStoreCnpj is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPlan_type = dataTransaction.transaction_acquirer.plan_type;\r",
											"pm.test(\"Validate if the plan_type is not empty and your content is [\"+contentPlan_type+\"]\", () => {\r",
											"    if (pm.expect(contentStoreCnpj).to.be.a('string')){\r",
											"        pm.test(\"Yes, plan_type is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, plan_type is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_type = dataTransaction.transaction_acquirer.capture_type;\r",
											"pm.test(\"Validate if the capture_type is not empty and your content is [\"+contentCapture_type+\"]\", () => {\r",
											"    if (pm.expect(contentCapture_type).to.be.a('string')){\r",
											"        pm.test(\"Yes, capture_type is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, capture_type is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installments = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].acquirer_trs_id;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installments);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installments is not empty and your content is [\"+contentAcquirer_trs_installments+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installments).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installments is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installments is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsInstallment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsInstallment);\r",
											"pm.test(\"Validate if the acquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsInstallment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsInstallment).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsAmount = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].amount;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsAmount);\r",
											"pm.test(\"Validate if the acquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsAmount+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsAmount).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsReceipt_prevision_id = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].receipt_prevision_id;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsReceipt_prevision_id);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsReceipt_prevision_id is not empty and your content is [\"+contentAcquirer_trs_installmentsReceipt_prevision_id+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsReceipt_prevision_id).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsReceipt_prevision_id is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsReceipt_prevision_id is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsReceipt_prevision_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].receipt_prevision_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsReceipt_prevision_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsReceipt_prevision_date is not empty and your content is [\"+contentAcquirer_trs_installmentsReceipt_prevision_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsReceipt_prevision_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsReceipt_prevision_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsReceipt_prevision_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationInsert_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.insert_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationInsert_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationInsert_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationInsert_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationInsert_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationInsert_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationInsert_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationAcquirer_trs_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.acquirer_trs_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationAcquirer_trs_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationAcquirer_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationAcquirer_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationStore_trs_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationStore_trs_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationStore_trs_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationStore_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationStore_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationStore_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationStore_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationStore_installment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.store_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationStore_installment);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationStore_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationStore_installment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationStore_installment).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationStore_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationStore_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationAcquirer_installment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationAcquirer_installment);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationAcquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationAcquirer_installment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationAcquirer_installment).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationAcquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationAcquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationMv_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.mv_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationMv_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationMv_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationMv_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationMv_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationMv_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationMv_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationMf_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.mf_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationMf_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationMf_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationMf_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationMf_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationMf_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationMf_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationEf_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.ef_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationEf_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationEf_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationEf_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationEf_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationEf_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationEf_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationFee_divergence = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.fee_divergence;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationFee_divergence);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationFee_divergence is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationFee_divergence+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationFee_divergence).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationFee_divergence is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationFee_divergence is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/215750217/2018-03-05T03:51:04Z",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"215750217",
										"2018-03-05T03:51:04Z"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Cliente Busca PATH Store ID_DATE_STORE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66934155-2048-4785-898a-071c3803ca60",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_id = dataTransaction.store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_id is not empty and your content is [\"+contentStore_trs_id+\"]\", () => {\r",
											"    if (pm.expect(contentStore_trs_id).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentStore_trs_id is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStore_trs_id is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_date = dataTransaction.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_date is not empty and your content is [\"+contentStore_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentStore_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStore_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStore_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTef_nsu = dataTransaction.tef_nsu;\r",
											"console.log(\"Aqui: \"+contentTef_nsu);\r",
											"pm.test(\"Validate if the contentTef_nsu is not empty and your content is [\"+contentTef_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentTef_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentTef_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentTef_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_nsu = dataTransaction.acquirer_nsu;\r",
											"console.log(\"Aqui: \"+contentAcquirer_nsu);\r",
											"pm.test(\"Validate if the contentAcquirer_nsu is not empty and your content is [\"+contentAcquirer_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTerminal_nsu = dataTransaction.terminal_nsu;\r",
											"console.log(\"Aqui: \"+contentTerminal_nsu);\r",
											"pm.test(\"Validate if the contentTerminal_nsu is not empty and your content is [\"+contentTerminal_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentTerminal_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentTerminal_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentTerminal_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTax_coupon = dataTransaction.tax_coupon;\r",
											"console.log(\"Aqui: \"+contentTax_coupon);\r",
											"pm.test(\"Validate if the contentTax_coupon is not empty and your content is [\"+contentTax_coupon+\"]\", () => {\r",
											"    pm.expect(contentTax_coupon).to.be.a('string')\r",
											"    pm.expect(contentTax_coupon.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthorization_code = dataTransaction.authorization_code;\r",
											"console.log(\"Aqui: \"+contentAuthorization_code);\r",
											"pm.test(\"Validate if the contentAuthorization_code is not empty and your content is [\"+contentAuthorization_code+\"]\", () => {\r",
											"    pm.expect(contentAuthorization_code).to.be.a('string')\r",
											"    pm.expect(contentAuthorization_code.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerId = dataTransaction.acquirer.id;\r",
											"console.log(\"Aqui: \"+contentAcquirerId);\r",
											"pm.test(\"Validate if the contentAcquirerId is not empty and your content is [\"+contentAcquirerId+\"]\", () => {\r",
											"    pm.expect(contentAcquirerId).to.be.a('number')\r",
											"    pm.expect(contentAcquirerId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerName = dataTransaction.acquirer.name;\r",
											"console.log(\"Aqui: \"+contentAcquirerName);\r",
											"pm.test(\"Validate if the contentAcquirerName is not empty and your content is [\"+contentAcquirerName+\"]\", () => {\r",
											"    pm.expect(contentAcquirerName).to.be.a('string')\r",
											"    pm.expect(contentAcquirerName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerCode = dataTransaction.acquirer.code;\r",
											"console.log(\"Aqui: \"+contentAcquirerCode);\r",
											"pm.test(\"Validate if the contentAcquirerName is not empty and your content is [\"+contentAcquirerCode+\"]\", () => {\r",
											"    pm.expect(contentAcquirerCode).to.be.a('string')\r",
											"    pm.expect(contentAcquirerCode.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentbrandId = dataTransaction.brand.id;\r",
											"console.log(\"Aqui: \"+contentbrandId);\r",
											"pm.test(\"Validate if the contentbrandId is not empty and your content is [\"+contentbrandId+\"]\", () => {\r",
											"    pm.expect(contentbrandId).to.be.a('number')\r",
											"    pm.expect(contentbrandId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandName = dataTransaction.brand.name;\r",
											"console.log(\"Aqui: \"+contentBrandName);\r",
											"pm.test(\"Validate if the contentBrandName is not empty and your content is [\"+contentBrandName+\"]\", () => {\r",
											"    pm.expect(contentBrandName).to.be.a('string')\r",
											"    pm.expect(contentBrandName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandCode = dataTransaction.brand.code;\r",
											"console.log(\"Aqui: \"+contentBrandCode);\r",
											"pm.test(\"Validate if the contentBrandCode is not empty and your content is [\"+contentBrandCode+\"]\", () => {\r",
											"    pm.expect(contentBrandCode).to.be.a('string')\r",
											"    pm.expect(contentBrandCode.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityId = dataTransaction.modality.id;\r",
											"console.log(\"Aqui: \"+contentModalityId);\r",
											"pm.test(\"Validate if the contentModalityId is not empty and your content is [\"+contentModalityId+\"]\", () => {\r",
											"    pm.expect(contentModalityId).to.be.a('number')\r",
											"    pm.expect(contentModalityId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityName = dataTransaction.modality.name;\r",
											"console.log(\"Aqui: \"+contentModalityName);\r",
											"pm.test(\"Validate if the contentModalityName is not empty and your content is [\"+contentModalityName+\"]\", () => {\r",
											"    pm.expect(contentModalityName).to.be.a('string')\r",
											"    pm.expect(contentModalityName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreId = dataTransaction.store.id;\r",
											"console.log(\"Aqui: \"+contentStoreId);\r",
											"pm.test(\"Validate if the contentStoreId is not empty and your content is [\"+contentStoreId+\"]\", () => {\r",
											"    pm.expect(contentStoreId).to.be.a('number')\r",
											"    pm.expect(contentStoreId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreName = dataTransaction.store.name;\r",
											"console.log(\"Aqui: \"+contentStoreName);\r",
											"pm.test(\"Validate if the contentStoreName is not empty and your content is [\"+contentStoreName+\"]\", () => {\r",
											"    pm.expect(contentStoreName).to.be.a('string')\r",
											"    pm.expect(contentStoreName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCode = dataTransaction.store.code;\r",
											"console.log(\"Aqui: \"+contentStoreCode);\r",
											"pm.test(\"Validate if the contentStoreCode is not empty and your content is [\"+contentStoreCode+\"]\", () => {\r",
											"    pm.expect(contentStoreCode).to.be.a('string')\r",
											"    pm.expect(contentStoreCode.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCnpj = dataTransaction.store.cnpj;\r",
											"console.log(\"Aqui: \"+contentStoreCnpj);\r",
											"pm.test(\"Validate if the contentStoreCnpj is not empty and your content is [\"+contentStoreCnpj+\"]\", () => {\r",
											"    pm.expect(contentStoreCnpj).to.be.a('string')\r",
											"    pm.expect(contentStoreCnpj.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTrs_info = dataTransaction.trs_info;\r",
											"console.log(\"Aqui: \"+contentTrs_info);\r",
											"pm.test(\"Validate if the contentTrs_info is not empty and your content is [\"+contentTrs_info+\"]\", () => {\r",
											"    pm.expect(contentTrs_info).to.be.a('string')\r",
											"    pm.expect(contentTrs_info.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAmount = dataTransaction.amount;\r",
											"console.log(\"Aqui: \"+contentTrs_info);\r",
											"pm.test(\"Validate if the contentAmount is not empty and your content is [\"+contentAmount+\"]\", () => {\r",
											"    pm.expect(contentAmount).to.be.a('number')\r",
											"    pm.expect(contentAmount.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentNumber_installments = dataTransaction.number_installments;\r",
											"console.log(\"Aqui: \"+contentNumber_installments);\r",
											"pm.test(\"Validate if the contentNumber_installments is not empty and your content is [\"+contentNumber_installments+\"]\", () => {\r",
											"    pm.expect(contentNumber_installments).to.be.a('number')\r",
											"    pm.expect(contentNumber_installments.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAccounting_date = dataTransaction.accounting_date;\r",
											"console.log(\"Aqui: \"+contentAccounting_date);\r",
											"pm.test(\"Validate if the contentAccounting_date is not empty and your content is [\"+contentAccounting_date+\"]\", () => {\r",
											"    pm.expect(contentAccounting_date).to.be.a('string')\r",
											"    pm.expect(contentAccounting_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_type = dataTransaction.capture_type;\r",
											"console.log(\"Aqui: \"+contentCapture_type);\r",
											"pm.test(\"Validate if the contentCapture_type is not empty and your content is [\"+contentCapture_type+\"]\", () => {\r",
											"    pm.expect(contentCapture_type).to.be.a('string')\r",
											"    pm.expect(contentCapture_type.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStatus = dataTransaction.status;\r",
											"console.log(\"Aqui: \"+contentStatus);\r",
											"pm.test(\"Validate if the contentStatus is not empty and your content is [\"+contentStatus+\"]\", () => {\r",
											"    pm.expect(contentStatus).to.be.a('string')\r",
											"    pm.expect(contentStatus.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPlan_type = dataTransaction.plan_type;\r",
											"console.log(\"Aqui: \"+contentPlan_type);\r",
											"pm.test(\"Validate if the contentPlan_type is not empty and your content is [\"+contentPlan_type+\"]\", () => {\r",
											"    pm.expect(contentPlan_type).to.be.a('string')\r",
											"    pm.expect(contentPlan_type.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthentication_code = dataTransaction.authentication_code;\r",
											"console.log(\"Aqui: \"+contentAuthentication_code);\r",
											"pm.test(\"Validate if the contentAuthentication_code is not empty and your content is [\"+contentAuthentication_code+\"]\", () => {\r",
											"    pm.expect(contentAuthentication_code).to.be.a('string')\r",
											"    pm.expect(contentAuthentication_code.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTid = dataTransaction.tid;\r",
											"console.log(\"Aqui: \"+contentTid);\r",
											"pm.test(\"Validate if the contentTid is not empty and your content is [\"+contentTid+\"]\", () => {\r",
											"    pm.expect(contentTid).to.be.a('string')\r",
											"    pm.expect(contentTid.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_date = dataTransaction.capture_date;\r",
											"console.log(\"Aqui: \"+contentCapture_date);\r",
											"pm.test(\"Validate if the contentCapture_date is not empty and your content is [\"+contentCapture_date+\"]\", () => {\r",
											"    pm.expect(contentCapture_date).to.be.a('string')\r",
											"    pm.expect(contentCapture_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPdv_operator_code = dataTransaction.pdv_operator_code;\r",
											"console.log(\"Aqui: \"+contentPdv_operator_code);\r",
											"pm.test(\"Validate if the contentPdv_operator_code is not empty and your content is [\"+contentPdv_operator_code+\"]\", () => {\r",
											"    pm.expect(contentPdv_operator_code).to.be.a('string')\r",
											"    pm.expect(contentPdv_operator_code.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentOrder_id = dataTransaction.order_id;\r",
											"console.log(\"Aqui: \"+contentOrder_id);\r",
											"pm.test(\"Validate if the contentOrder_id is not empty and your content is [\"+contentOrder_id+\"]\", () => {\r",
											"    pm.expect(contentOrder_id).to.be.a('string')\r",
											"    pm.expect(contentOrder_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_trs_id = dataTransaction.store_trs_installments[0].store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_trs_id is not empty and your content is [\"+contentStore_trs_installmentsStore_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_trs_date = dataTransaction.store_trs_installments[0].store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_trs_date is not empty and your content is [\"+contentStore_trs_installmentsStore_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_installments = dataTransaction.store_trs_installments[0].store_installments;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_installments);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_installments is not empty and your content is [\"+contentStore_trs_installmentsStore_installments+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_installments).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsStore_installments.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsAmount = dataTransaction.store_trs_installments[0].amount;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsAmount);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsAmount is not empty and your content is [\"+contentStore_trs_installmentsAmount+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsAmount).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsAmount.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationConciliation_id = dataTransaction.store_trs_installments[0].conciliation.conciliation_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationConciliation_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationConciliation_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationConciliation_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationConciliation_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationConciliation_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationInsert_date = dataTransaction.store_trs_installments[0].conciliation.insert_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationInsert_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationInsert_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationInsert_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationInsert_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationInsert_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_trs_id = dataTransaction.store_trs_installments[0].conciliation.acquirer_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_trs_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_trs_date = dataTransaction.store_trs_installments[0].conciliation.acquirer_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_trs_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_trs_id = dataTransaction.store_trs_installments[0].conciliation.store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_trs_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_trs_date = dataTransaction.store_trs_installments[0].conciliation.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_trs_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_installment = dataTransaction.store_trs_installments[0].conciliation.store_installment;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_installment);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_installment is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_installment+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_installment).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_installment.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_installment = dataTransaction.store_trs_installments[0].conciliation.acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_installment);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_installment is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_installment+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_installment).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_installment.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationMv_status = dataTransaction.store_trs_installments[0].conciliation.mv_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationMv_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationMv_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationMv_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMv_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMv_status.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationMf_status = dataTransaction.store_trs_installments[0].conciliation.mf_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationMf_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationMf_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationMf_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMf_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMf_status.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationEf_status = dataTransaction.store_trs_installments[0].conciliation.ef_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationEf_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationEf_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationEf_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationEf_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationEf_status.length).not.eql(0)\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/99934975865/2018-01-01T02:00:00Z/store",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"99934975865",
										"2018-01-01T02:00:00Z",
										"store"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Distribuidor",
					"item": [
						{
							"name": "Gerar Token Perfil DISTRIBUIDOR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2963f816-711b-4543-9612-2188d2d57b0a",
										"exec": [
											"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Distribuidor Param Chain_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "842ff507-1f40-4469-aa23-9acbb7ba61cb",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&chain_id=4606",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4606"
										},
										{
											"key": "store_ids",
											"value": "8914",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Distribuidor Param company_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76a0b04d-e08a-4d04-94e6-bf70d9d7cf5f",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"/*\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&company_id=14002",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "14002"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam store_ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc37900d-ca25-45bd-8163-1cfecf86be18",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"/*\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam acquirer_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d7f1e71-6864-49bf-9b21-83bfba7abfc7",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"/*\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&acquirer_id=1",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam brand_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed71822c-fa02-41a7-99b3-1fd93407f2d2",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"/*\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&brand_id=4504",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam modality_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b5588a-fdf5-42e9-8c3f-4dabdf12fcb9",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"/*\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&modality_id=4468",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam capture_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1889671-cf89-4660-99f6-e79ef6caa6d1",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"/*\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&capture_type=POS",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam capture_method_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5e035a6-2704-4b66-843e-a37cf554e83b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&capture_method_id=4966",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "4966"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam mv_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3efb595-2158-4e1a-8735-7d54eb3c6d22",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&mv_status=NOT_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "4966",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "00000000000000000000",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "NOT_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam mf_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35fb4c67-28cf-462b-989b-d528a57af584",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&mf_status=NOT_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "4966",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "00000000000000000000",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam ef_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed061c77-ce9c-4f61-9f8f-6247f43bc1a6",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&ef_status=NOT_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "4966",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "00000000000000000000",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam acquirer_nsu",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0e3fe5c-602a-4217-85ed-923c43015b2b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&acquirer_nsu=24458",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "4966",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "00000000000000000000",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "24458"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam tef_nsu",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d3fc33b-70a7-4124-8bb2-8d21884590a5",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&tef_nsu=78849",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "4966",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "00000000000000000000",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "24458",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "78849"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam tax_coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9d006fa-0ce8-459d-87e7-c69bd2f755d3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&tax_coupon=00000000000000000000",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "4966",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "00000000000000000000",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "24458",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "78849",
											"disabled": true
										},
										{
											"key": "tax_coupon",
											"value": "00000000000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil DistribuidorParam size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f993b011-06ab-4131-8db2-8c690f078eed",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2017-03-01T03:00:00Z&end_date=2017-03-02T02:59:59Z&store_ids=8914&size=20",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-03-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2017-03-02T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914"
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4504",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4468",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "4966",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "00000000000000000000",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "24458",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "78849",
											"disabled": true
										},
										{
											"key": "tax_coupon",
											"value": "00000000000000000000",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Distribuidor Busca PATH Conciliation_id e date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a631162-b38e-473e-bf7f-73df9edbf8b3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present - ID: \" +dataTransaction.transaction_acquirer.acquirer_trs_id, () => {\r",
											"    pm.expect(dataTransaction.transaction_acquirer.acquirer_trs_id).to.equal(dataTransaction.transaction_acquirer.acquirer_trs_id);\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present - ID: \" +dataTransaction.transaction_acquirer.acquirer_trs_date, () => {\r",
											"    pm.expect(dataTransaction.transaction_acquirer.acquirer_trs_date).to.equal(dataTransaction.transaction_acquirer.acquirer_trs_date);\r",
											"});  \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const conteudoTef_nsu = dataTransaction.transaction_acquirer.tef_nsu;\r",
											"pm.test(\"Validate if the tef_nsu is present - ID: \" +conteudoTef_nsu, () => {\r",
											"    pm.expect(conteudoTef_nsu).to.equal(dataTransaction.transaction_acquirer.tef_nsu);\r",
											"});  \r",
											"\r",
											"var dataTransaction2 = JSON.parse(responseBody);\r",
											"const conteudoIsNumber = dataTransaction2.transaction_acquirer.tef_nsu;\r",
											"pm.test(\"Validate if the tef_nsu is not empty: \" +conteudoIsNumber, () => {\r",
											"    if (pm.expect(conteudoIsNumber).to.be.a('number')){\r",
											"        pm.test(\"Yes, tef_nsu is not empty and is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_nsu = dataTransaction.transaction_acquirer.acquirer_nsu;\r",
											"pm.test(\"Validate if the acquirer_nsu is not empty and your content is [\"+contentAcquirer_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_reject_nsu = dataTransaction.transaction_acquirer.acquirer_reject_nsu;\r",
											"pm.test(\"Validate if the acquirer_nsu is not empty and your content is [\"+contentAcquirer_reject_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_reject_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_reject_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_reject_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											" \r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthorization_code = dataTransaction.transaction_acquirer.authorization_code;\r",
											"pm.test(\"Validate if the authorization_code is not empty and your content is [\"+contentAuthorization_code+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_reject_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, authorization_code is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, authorization_code is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTransaction_info = dataTransaction.transaction_acquirer.transaction_info;\r",
											"pm.test(\"Validate if the transaction_info is not empty and your content is [\"+contentTransaction_info+\"]\", () => {\r",
											"    if (pm.expect(contentTransaction_info).to.be.a('string')){\r",
											"        pm.test(\"Yes, transaction_info is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, transaction_info is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAmount = dataTransaction.transaction_acquirer.amount;\r",
											"pm.test(\"Validate if the amount is not empty and your content is [\"+contentAmount+\"]\", () => {\r",
											"    if (pm.expect(contentAmount).to.be.a('number')){\r",
											"        pm.test(\"Yes, amount is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, amount is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentInstallments_number = dataTransaction.transaction_acquirer.installments_number;\r",
											"pm.test(\"Validate if the installments_number is not empty and your content is [\"+contentInstallments_number+\"]\", () => {\r",
											"    if (pm.expect(contentInstallments_number).to.be.a('number')){\r",
											"        pm.test(\"Yes, installments_number is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, installments_number is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStatus = dataTransaction.transaction_acquirer.status;\r",
											"pm.test(\"Validate if the status is not empty and your content is [\"+contentStatus+\"]\", () => {\r",
											"    if (pm.expect(contentStatus).to.be.a('string')){\r",
											"        pm.test(\"Yes, status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPos_number = dataTransaction.transaction_acquirer.pos_number;\r",
											"pm.test(\"Validate if the pos_number is not empty and your content is [\"+contentPos_number+\"]\", () => {\r",
											"    if (pm.expect(contentPos_number).to.be.a('number')){\r",
											"        pm.test(\"Yes, pos_number is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, pos_number is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTerminal_number = dataTransaction.transaction_acquirer.terminal_number;\r",
											"pm.test(\"Validate if the terminal_number is not empty and your content is [\"+contentTerminal_number+\"]\", () => {\r",
											"    if (pm.expect(contentTransaction_info).to.be.a('string')){\r",
											"        pm.test(\"Yes, terminal_number is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, terminal_number is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_date = dataTransaction.transaction_acquirer.capture_date;\r",
											"pm.test(\"Validate if the capture_date is not empty and your content is [\"+contentCapture_date+\"]\", () => {\r",
											"    if (pm.expect(contentCapture_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, capture_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, capture_date is empty or not is type string!\"); \r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerId = dataTransaction.transaction_acquirer.acquirer.id;\r",
											"pm.test(\"Validate if the contentAcquirerId is not empty and your content is [\"+contentAcquirerId+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirerId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirerId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerName = dataTransaction.transaction_acquirer.acquirer.name;\r",
											"pm.test(\"Validate if the AcquirerName is not empty and your content is [\"+contentAcquirerName+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerName).to.be.a('string')){\r",
											"        pm.test(\"Yes, AcquirerName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, AcquirerName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerCode = dataTransaction.transaction_acquirer.acquirer.code;\r",
											"pm.test(\"Validate if the contentAcquirerCode is not empty and your content is [\"+contentAcquirerCode+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerCode).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirerCode is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirerCode is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandId = dataTransaction.transaction_acquirer.brand.id;\r",
											"pm.test(\"Validate if the contentBrandId is not empty and your content is [\"+contentBrandId+\"]\", () => {\r",
											"    if (pm.expect(contentBrandId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentBrandId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandName = dataTransaction.transaction_acquirer.brand.name;\r",
											"pm.test(\"Validate if the contentBrandName is not empty and your content is [\"+contentBrandName+\"]\", () => {\r",
											"    if (pm.expect(contentBrandName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentBrandName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandCode = dataTransaction.transaction_acquirer.brand.code;\r",
											"pm.test(\"Validate if the contentBrandCode is not empty and your content is [\"+contentBrandCode+\"]\", () => {\r",
											"    if (pm.expect(contentBrandCode).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentBrandCode is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandCode is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityId = dataTransaction.transaction_acquirer.modality.id;\r",
											"pm.test(\"Validate if the contentModalityId is not empty and your content is [\"+contentModalityId+\"]\", () => {\r",
											"    if (pm.expect(contentModalityId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentModalityId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentModalityId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityName = dataTransaction.transaction_acquirer.modality.name;\r",
											"pm.test(\"Validate if the contentModalityName is not empty and your content is [\"+contentModalityName+\"]\", () => {\r",
											"    if (pm.expect(contentModalityName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentModalityName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentModalityName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreName = dataTransaction.transaction_acquirer.store.name;\r",
											"pm.test(\"Validate if the contentStoreName is not empty and your content is [\"+contentStoreName+\"]\", () => {\r",
											"    if (pm.expect(contentStoreName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStoreName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStoreName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCnpj = dataTransaction.transaction_acquirer.store.cnpj;\r",
											"pm.test(\"Validate if the contentStoreCnpj is not empty and your content is [\"+contentStoreCnpj+\"]\", () => {\r",
											"    if (pm.expect(contentStoreCnpj).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStoreCnpj is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStoreCnpj is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPlan_type = dataTransaction.transaction_acquirer.plan_type;\r",
											"pm.test(\"Validate if the plan_type is not empty and your content is [\"+contentPlan_type+\"]\", () => {\r",
											"    if (pm.expect(contentStoreCnpj).to.be.a('string')){\r",
											"        pm.test(\"Yes, plan_type is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, plan_type is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_type = dataTransaction.transaction_acquirer.capture_type;\r",
											"pm.test(\"Validate if the capture_type is not empty and your content is [\"+contentCapture_type+\"]\", () => {\r",
											"    if (pm.expect(contentCapture_type).to.be.a('string')){\r",
											"        pm.test(\"Yes, capture_type is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, capture_type is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installments = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].acquirer_trs_id;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installments);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installments is not empty and your content is [\"+contentAcquirer_trs_installments+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installments).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installments is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installments is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsInstallment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsInstallment);\r",
											"pm.test(\"Validate if the acquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsInstallment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsInstallment).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsAmount = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].amount;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsAmount);\r",
											"pm.test(\"Validate if the acquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsAmount+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsAmount).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsReceipt_prevision_id = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].receipt_prevision_id;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsReceipt_prevision_id);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsReceipt_prevision_id is not empty and your content is [\"+contentAcquirer_trs_installmentsReceipt_prevision_id+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsReceipt_prevision_id).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsReceipt_prevision_id is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsReceipt_prevision_id is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsReceipt_prevision_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].receipt_prevision_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsReceipt_prevision_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsReceipt_prevision_date is not empty and your content is [\"+contentAcquirer_trs_installmentsReceipt_prevision_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsReceipt_prevision_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsReceipt_prevision_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsReceipt_prevision_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationInsert_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.insert_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationInsert_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationInsert_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationInsert_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationInsert_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationInsert_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationInsert_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationAcquirer_trs_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.acquirer_trs_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationAcquirer_trs_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationAcquirer_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationAcquirer_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationStore_trs_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationStore_trs_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationStore_trs_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationStore_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationStore_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationStore_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationStore_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationStore_installment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.store_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationStore_installment);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationStore_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationStore_installment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationStore_installment).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationStore_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationStore_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationAcquirer_installment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationAcquirer_installment);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationAcquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationAcquirer_installment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationAcquirer_installment).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationAcquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationAcquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationMv_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.mv_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationMv_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationMv_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationMv_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationMv_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationMv_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationMv_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationMf_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.mf_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationMf_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationMf_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationMf_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationMf_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationMf_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationMf_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationEf_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.ef_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationEf_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationEf_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationEf_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationEf_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationEf_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationEf_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationFee_divergence = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.fee_divergence;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationFee_divergence);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationFee_divergence is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationFee_divergence+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationFee_divergence).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationFee_divergence is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationFee_divergence is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/128039397/2017-03-03T09:16:36Z",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"128039397",
										"2017-03-03T09:16:36Z"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil Distribuidor Busca PATH Store ID_DATE_STORE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a26b6fed-f2d7-4ae3-ab56-d2c4cf287702",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_id = dataTransaction.store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_id is not empty and your content is [\"+contentStore_trs_id+\"]\", () => {\r",
											"    if (pm.expect(contentStore_trs_id).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentStore_trs_id is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStore_trs_id is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_date = dataTransaction.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_date is not empty and your content is [\"+contentStore_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentStore_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStore_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStore_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTef_nsu = dataTransaction.tef_nsu;\r",
											"console.log(\"Aqui: \"+contentTef_nsu);\r",
											"pm.test(\"Validate if the contentTef_nsu is not empty and your content is [\"+contentTef_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentTef_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentTef_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentTef_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_nsu = dataTransaction.acquirer_nsu;\r",
											"console.log(\"Aqui: \"+contentAcquirer_nsu);\r",
											"pm.test(\"Validate if the contentAcquirer_nsu is not empty and your content is [\"+contentAcquirer_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTerminal_nsu = dataTransaction.terminal_nsu;\r",
											"console.log(\"Aqui: \"+contentTerminal_nsu);\r",
											"pm.test(\"Validate if the contentTerminal_nsu is not empty and your content is [\"+contentTerminal_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentTerminal_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentTerminal_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentTerminal_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTax_coupon = dataTransaction.tax_coupon;\r",
											"console.log(\"Aqui: \"+contentTax_coupon);\r",
											"pm.test(\"Validate if the contentTax_coupon is not empty and your content is [\"+contentTax_coupon+\"]\", () => {\r",
											"    pm.expect(contentTax_coupon).to.be.a('string')\r",
											"    pm.expect(contentTax_coupon.length).not.eql(0)\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthorization_code = dataTransaction.authorization_code;\r",
											"console.log(\"Aqui: \"+contentAuthorization_code);\r",
											"pm.test(\"Validate if the contentAuthorization_code is not empty and your content is [\"+contentAuthorization_code+\"]\", () => {\r",
											"    pm.expect(contentAuthorization_code).to.be.a('string')\r",
											"    pm.expect(contentAuthorization_code.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerId = dataTransaction.acquirer.id;\r",
											"console.log(\"Aqui: \"+contentAcquirerId);\r",
											"pm.test(\"Validate if the contentAcquirerId is not empty and your content is [\"+contentAcquirerId+\"]\", () => {\r",
											"    pm.expect(contentAcquirerId).to.be.a('number')\r",
											"    pm.expect(contentAcquirerId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerName = dataTransaction.acquirer.name;\r",
											"console.log(\"Aqui: \"+contentAcquirerName);\r",
											"pm.test(\"Validate if the contentAcquirerName is not empty and your content is [\"+contentAcquirerName+\"]\", () => {\r",
											"    pm.expect(contentAcquirerName).to.be.a('string')\r",
											"    pm.expect(contentAcquirerName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerCode = dataTransaction.acquirer.code;\r",
											"console.log(\"Aqui: \"+contentAcquirerCode);\r",
											"pm.test(\"Validate if the contentAcquirerName is not empty and your content is [\"+contentAcquirerCode+\"]\", () => {\r",
											"    pm.expect(contentAcquirerCode).to.be.a('string')\r",
											"    pm.expect(contentAcquirerCode.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentbrandId = dataTransaction.brand.id;\r",
											"console.log(\"Aqui: \"+contentbrandId);\r",
											"pm.test(\"Validate if the contentbrandId is not empty and your content is [\"+contentbrandId+\"]\", () => {\r",
											"    pm.expect(contentbrandId).to.be.a('number')\r",
											"    pm.expect(contentbrandId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandName = dataTransaction.brand.name;\r",
											"console.log(\"Aqui: \"+contentBrandName);\r",
											"pm.test(\"Validate if the contentBrandName is not empty and your content is [\"+contentBrandName+\"]\", () => {\r",
											"    pm.expect(contentBrandName).to.be.a('string')\r",
											"    pm.expect(contentBrandName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandCode = dataTransaction.brand.code;\r",
											"console.log(\"Aqui: \"+contentBrandCode);\r",
											"pm.test(\"Validate if the contentBrandCode is not empty and your content is [\"+contentBrandCode+\"]\", () => {\r",
											"    pm.expect(contentBrandCode).to.be.a('string')\r",
											"    pm.expect(contentBrandCode.length).not.eql(0)\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityId = dataTransaction.modality.id;\r",
											"console.log(\"Aqui: \"+contentModalityId);\r",
											"pm.test(\"Validate if the contentModalityId is not empty and your content is [\"+contentModalityId+\"]\", () => {\r",
											"    pm.expect(contentModalityId).to.be.a('number')\r",
											"    pm.expect(contentModalityId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityName = dataTransaction.modality.name;\r",
											"console.log(\"Aqui: \"+contentModalityName);\r",
											"pm.test(\"Validate if the contentModalityName is not empty and your content is [\"+contentModalityName+\"]\", () => {\r",
											"    pm.expect(contentModalityName).to.be.a('string')\r",
											"    pm.expect(contentModalityName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreId = dataTransaction.store.id;\r",
											"console.log(\"Aqui: \"+contentStoreId);\r",
											"pm.test(\"Validate if the contentStoreId is not empty and your content is [\"+contentStoreId+\"]\", () => {\r",
											"    pm.expect(contentStoreId).to.be.a('number')\r",
											"    pm.expect(contentStoreId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreName = dataTransaction.store.name;\r",
											"console.log(\"Aqui: \"+contentStoreName);\r",
											"pm.test(\"Validate if the contentStoreName is not empty and your content is [\"+contentStoreName+\"]\", () => {\r",
											"    pm.expect(contentStoreName).to.be.a('string')\r",
											"    pm.expect(contentStoreName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCode = dataTransaction.store.code;\r",
											"console.log(\"Aqui: \"+contentStoreCode);\r",
											"pm.test(\"Validate if the contentStoreCode is not empty and your content is [\"+contentStoreCode+\"]\", () => {\r",
											"    pm.expect(contentStoreCode).to.be.a('string')\r",
											"    pm.expect(contentStoreCode.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCnpj = dataTransaction.store.cnpj;\r",
											"console.log(\"Aqui: \"+contentStoreCnpj);\r",
											"pm.test(\"Validate if the contentStoreCnpj is not empty and your content is [\"+contentStoreCnpj+\"]\", () => {\r",
											"    pm.expect(contentStoreCnpj).to.be.a('string')\r",
											"    pm.expect(contentStoreCnpj.length).not.eql(0)\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentNumber_installments = dataTransaction.number_installments;\r",
											"console.log(\"Aqui: \"+contentNumber_installments);\r",
											"pm.test(\"Validate if the contentNumber_installments is not empty and your content is [\"+contentNumber_installments+\"]\", () => {\r",
											"    pm.expect(contentNumber_installments).to.be.a('number')\r",
											"    pm.expect(contentNumber_installments.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAccounting_date = dataTransaction.accounting_date;\r",
											"console.log(\"Aqui: \"+contentAccounting_date);\r",
											"pm.test(\"Validate if the contentAccounting_date is not empty and your content is [\"+contentAccounting_date+\"]\", () => {\r",
											"    pm.expect(contentAccounting_date).to.be.a('string')\r",
											"    pm.expect(contentAccounting_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_type = dataTransaction.capture_type;\r",
											"console.log(\"Aqui: \"+contentCapture_type);\r",
											"pm.test(\"Validate if the contentCapture_type is not empty and your content is [\"+contentCapture_type+\"]\", () => {\r",
											"    pm.expect(contentCapture_type).to.be.a('string')\r",
											"    pm.expect(contentCapture_type.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStatus = dataTransaction.status;\r",
											"console.log(\"Aqui: \"+contentStatus);\r",
											"pm.test(\"Validate if the contentStatus is not empty and your content is [\"+contentStatus+\"]\", () => {\r",
											"    pm.expect(contentStatus).to.be.a('string')\r",
											"    pm.expect(contentStatus.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPlan_type = dataTransaction.plan_type;\r",
											"console.log(\"Aqui: \"+contentPlan_type);\r",
											"pm.test(\"Validate if the contentPlan_type is not empty and your content is [\"+contentPlan_type+\"]\", () => {\r",
											"    pm.expect(contentPlan_type).to.be.a('string')\r",
											"    pm.expect(contentPlan_type.length).not.eql(0)\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthentication_code = dataTransaction.authentication_code;\r",
											"console.log(\"Aqui: \"+contentAuthentication_code);\r",
											"pm.test(\"Validate if the contentAuthentication_code is not empty and your content is [\"+contentAuthentication_code+\"]\", () => {\r",
											"    pm.expect(contentAuthentication_code).to.be.a('string')\r",
											"    pm.expect(contentAuthentication_code.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTid = dataTransaction.tid;\r",
											"console.log(\"Aqui: \"+contentTid);\r",
											"pm.test(\"Validate if the contentTid is not empty and your content is [\"+contentTid+\"]\", () => {\r",
											"    pm.expect(contentTid).to.be.a('string')\r",
											"    pm.expect(contentTid.length).not.eql(0)\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_date = dataTransaction.capture_date;\r",
											"console.log(\"Aqui: \"+contentCapture_date);\r",
											"pm.test(\"Validate if the contentCapture_date is not empty and your content is [\"+contentCapture_date+\"]\", () => {\r",
											"    pm.expect(contentCapture_date).to.be.a('string')\r",
											"    pm.expect(contentCapture_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPdv_operator_code = dataTransaction.pdv_operator_code;\r",
											"console.log(\"Aqui: \"+contentPdv_operator_code);\r",
											"pm.test(\"Validate if the contentPdv_operator_code is not empty and your content is [\"+contentPdv_operator_code+\"]\", () => {\r",
											"    pm.expect(contentPdv_operator_code).to.be.a('string')\r",
											"    pm.expect(contentPdv_operator_code.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentOrder_id = dataTransaction.order_id;\r",
											"console.log(\"Aqui: \"+contentOrder_id);\r",
											"pm.test(\"Validate if the contentOrder_id is not empty and your content is [\"+contentOrder_id+\"]\", () => {\r",
											"    pm.expect(contentOrder_id).to.be.a('string')\r",
											"    pm.expect(contentOrder_id.length).not.eql(0)\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_trs_id = dataTransaction.store_trs_installments[0].store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_trs_id is not empty and your content is [\"+contentStore_trs_installmentsStore_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_trs_date = dataTransaction.store_trs_installments[0].store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_trs_date is not empty and your content is [\"+contentStore_trs_installmentsStore_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_installments = dataTransaction.store_trs_installments[0].store_installments;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_installments);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_installments is not empty and your content is [\"+contentStore_trs_installmentsStore_installments+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_installments).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsStore_installments.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsAmount = dataTransaction.store_trs_installments[0].amount;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsAmount);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsAmount is not empty and your content is [\"+contentStore_trs_installmentsAmount+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsAmount).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsAmount.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationConciliation_id = dataTransaction.store_trs_installments[0].conciliation.conciliation_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationConciliation_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationConciliation_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationConciliation_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationConciliation_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationConciliation_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationInsert_date = dataTransaction.store_trs_installments[0].conciliation.insert_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationInsert_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationInsert_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationInsert_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationInsert_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationInsert_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_trs_id = dataTransaction.store_trs_installments[0].conciliation.acquirer_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_trs_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_trs_date = dataTransaction.store_trs_installments[0].conciliation.acquirer_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_trs_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_trs_id = dataTransaction.store_trs_installments[0].conciliation.store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_trs_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_trs_date = dataTransaction.store_trs_installments[0].conciliation.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_trs_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_installment = dataTransaction.store_trs_installments[0].conciliation.store_installment;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_installment);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_installment is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_installment+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_installment).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_installment.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_installment = dataTransaction.store_trs_installments[0].conciliation.acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_installment);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_installment is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_installment+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_installment).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_installment.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationMv_status = dataTransaction.store_trs_installments[0].conciliation.mv_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationMv_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationMv_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationMv_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMv_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMv_status.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationMf_status = dataTransaction.store_trs_installments[0].conciliation.mf_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationMf_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationMf_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationMf_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMf_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMf_status.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationEf_status = dataTransaction.store_trs_installments[0].conciliation.ef_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationEf_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationEf_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationEf_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationEf_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationEf_status.length).not.eql(0)\r",
											"});*/\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilDistribuidor}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/26700054/2017-03-01T23:28:31Z/store",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"26700054",
										"2017-03-01T23:28:31Z",
										"store"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil GLojas",
					"item": [
						{
							"name": "Gerar Token Perfil GRUPO LOJAS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7ee4f72-77c6-4e83-a1b6-11a2ce84663e",
										"exec": [
											"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param Company_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "593ee830-5f03-4cb0-b1c4-da1618f5b2e3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "8914",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param store_ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6dbdc9f-1901-41e9-9d7e-34b3fd8ae9df",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&store_ids=99919207",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207"
										},
										{
											"key": "company_id",
											"value": "922661",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param acquirer_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d6b05d4-855e-4bcc-90e4-6ae628353b5b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&acquirer_id=175",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param brand_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7de64257-ad6b-42e3-a234-d94a9fe7531e",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&brand_id=4502",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502"
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param modality_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68323dad-c01f-478b-a96b-77e985c10b24",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&modality_id=4469",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param capture_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ebf64b1-0e1a-4add-acf2-19501da2def3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&capture_type=SBO",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "SBO"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param mv_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63528fd0-1cf3-4324-9b78-126d23bf1775",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&mv_status=CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "SBO",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "6206802",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param mf_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3987c977-5af3-4020-91d0-e2915ef33285",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&mf_status=NOT_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "SBO",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "6206802",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param ef_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda98cea-15c8-420d-b96b-d47d9bda0472",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&ef_status=NOT_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "SBO",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "6206802",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param acquirer_nsu",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b9ef676-865c-4c74-ade1-17a301b9c31d",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&acquirer_nsu=0",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "SBO",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "6206802",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param tef_nsu",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "735e14db-6c03-434d-a8e3-4877dad92933",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&tef_nsu=6206761",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "SBO",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "6206802",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "0",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "6206761"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLoja Param tid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "916f67a7-436a-490d-86ef-11010f9effc1",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(dataConciliation_id.content[0].conciliation_id);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(dataInsert_date.content[0].insert_date);\r",
											"}); \r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    if (pm.expect(dataInstallment.content[0].installment).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute INSTALLMENT has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    if (pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute installment has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions?begin_date=2019-07-01T03:00:00Z&end_date=2019-07-31T02:59:59Z&company_id=922661&tid=5021740351",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2019-07-01T03:00:00Z"
										},
										{
											"key": "end_date",
											"value": "2019-07-31T02:59:59Z"
										},
										{
											"key": "chain_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "99919207",
											"disabled": true
										},
										{
											"key": "company_id",
											"value": "922661"
										},
										{
											"key": "acquirer_id",
											"value": "175",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "SBO",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "6206802",
											"disabled": true
										},
										{
											"key": "mv_status",
											"value": "CONCILIATED",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "ef_status",
											"value": "NOT_CONCILIATED",
											"disabled": true
										},
										{
											"key": "acquirer_nsu",
											"value": "0",
											"disabled": true
										},
										{
											"key": "tef_nsu",
											"value": "6206761",
											"disabled": true
										},
										{
											"key": "tid",
											"value": "5021740351"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLOJAS Busca PATH Conciliation_id e date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16d4ca7e-afe6-4428-becf-0f31868ee5a6",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present - ID: \" +dataTransaction.transaction_acquirer.acquirer_trs_id, () => {\r",
											"    pm.expect(dataTransaction.transaction_acquirer.acquirer_trs_id).to.equal(dataTransaction.transaction_acquirer.acquirer_trs_id);\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present - ID: \" +dataTransaction.transaction_acquirer.acquirer_trs_date, () => {\r",
											"    pm.expect(dataTransaction.transaction_acquirer.acquirer_trs_date).to.equal(dataTransaction.transaction_acquirer.acquirer_trs_date);\r",
											"});  \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const conteudoTef_nsu = dataTransaction.transaction_acquirer.tef_nsu;\r",
											"pm.test(\"Validate if the tef_nsu is present - ID: \" +conteudoTef_nsu, () => {\r",
											"    pm.expect(conteudoTef_nsu).to.equal(dataTransaction.transaction_acquirer.tef_nsu);\r",
											"});  \r",
											"\r",
											"var dataTransaction2 = JSON.parse(responseBody);\r",
											"const conteudoIsNumber = dataTransaction2.transaction_acquirer.tef_nsu;\r",
											"pm.test(\"Validate if the tef_nsu is not empty: \" +conteudoIsNumber, () => {\r",
											"    if (pm.expect(conteudoIsNumber).to.be.a('number')){\r",
											"        pm.test(\"Yes, tef_nsu is not empty and is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_nsu = dataTransaction.transaction_acquirer.acquirer_nsu;\r",
											"pm.test(\"Validate if the acquirer_nsu is not empty and your content is [\"+contentAcquirer_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_reject_nsu = dataTransaction.transaction_acquirer.acquirer_reject_nsu;\r",
											"pm.test(\"Validate if the acquirer_nsu is not empty and your content is [\"+contentAcquirer_reject_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_reject_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_reject_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_reject_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											" \r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthorization_code = dataTransaction.transaction_acquirer.authorization_code;\r",
											"pm.test(\"Validate if the authorization_code is not empty and your content is [\"+contentAuthorization_code+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_reject_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, authorization_code is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, authorization_code is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTransaction_info = dataTransaction.transaction_acquirer.transaction_info;\r",
											"pm.test(\"Validate if the transaction_info is not empty and your content is [\"+contentTransaction_info+\"]\", () => {\r",
											"    if (pm.expect(contentTransaction_info).to.be.a('string')){\r",
											"        pm.test(\"Yes, transaction_info is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, transaction_info is empty or not is type string!\"); \r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAmount = dataTransaction.transaction_acquirer.amount;\r",
											"pm.test(\"Validate if the amount is not empty and your content is [\"+contentAmount+\"]\", () => {\r",
											"    if (pm.expect(contentAmount).to.be.a('number')){\r",
											"        pm.test(\"Yes, amount is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, amount is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentInstallments_number = dataTransaction.transaction_acquirer.installments_number;\r",
											"pm.test(\"Validate if the installments_number is not empty and your content is [\"+contentInstallments_number+\"]\", () => {\r",
											"    if (pm.expect(contentInstallments_number).to.be.a('number')){\r",
											"        pm.test(\"Yes, installments_number is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, installments_number is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStatus = dataTransaction.transaction_acquirer.status;\r",
											"pm.test(\"Validate if the status is not empty and your content is [\"+contentStatus+\"]\", () => {\r",
											"    if (pm.expect(contentStatus).to.be.a('string')){\r",
											"        pm.test(\"Yes, status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPos_number = dataTransaction.transaction_acquirer.pos_number;\r",
											"pm.test(\"Validate if the pos_number is not empty and your content is [\"+contentPos_number+\"]\", () => {\r",
											"    if (pm.expect(contentPos_number).to.be.a('number')){\r",
											"        pm.test(\"Yes, pos_number is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, pos_number is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTerminal_number = dataTransaction.transaction_acquirer.terminal_number;\r",
											"pm.test(\"Validate if the terminal_number is not empty and your content is [\"+contentTerminal_number+\"]\", () => {\r",
											"    if (pm.expect(contentTransaction_info).to.be.a('string')){\r",
											"        pm.test(\"Yes, terminal_number is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, terminal_number is empty or not is type string!\"); \r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_date = dataTransaction.transaction_acquirer.capture_date;\r",
											"pm.test(\"Validate if the capture_date is not empty and your content is [\"+contentCapture_date+\"]\", () => {\r",
											"    if (pm.expect(contentCapture_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, capture_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, capture_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerId = dataTransaction.transaction_acquirer.acquirer.id;\r",
											"pm.test(\"Validate if the contentAcquirerId is not empty and your content is [\"+contentAcquirerId+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirerId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirerId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerName = dataTransaction.transaction_acquirer.acquirer.name;\r",
											"pm.test(\"Validate if the AcquirerName is not empty and your content is [\"+contentAcquirerName+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerName).to.be.a('string')){\r",
											"        pm.test(\"Yes, AcquirerName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, AcquirerName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerCode = dataTransaction.transaction_acquirer.acquirer.code;\r",
											"pm.test(\"Validate if the contentAcquirerCode is not empty and your content is [\"+contentAcquirerCode+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirerCode).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirerCode is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirerCode is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandId = dataTransaction.transaction_acquirer.brand.id;\r",
											"pm.test(\"Validate if the contentBrandId is not empty and your content is [\"+contentBrandId+\"]\", () => {\r",
											"    if (pm.expect(contentBrandId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentBrandId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandName = dataTransaction.transaction_acquirer.brand.name;\r",
											"pm.test(\"Validate if the contentBrandName is not empty and your content is [\"+contentBrandName+\"]\", () => {\r",
											"    if (pm.expect(contentBrandName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentBrandName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandCode = dataTransaction.transaction_acquirer.brand.code;\r",
											"pm.test(\"Validate if the contentBrandCode is not empty and your content is [\"+contentBrandCode+\"]\", () => {\r",
											"    if (pm.expect(contentBrandCode).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentBrandCode is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentBrandCode is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityId = dataTransaction.transaction_acquirer.modality.id;\r",
											"pm.test(\"Validate if the contentModalityId is not empty and your content is [\"+contentModalityId+\"]\", () => {\r",
											"    if (pm.expect(contentModalityId).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentModalityId is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentModalityId is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityName = dataTransaction.transaction_acquirer.modality.name;\r",
											"pm.test(\"Validate if the contentModalityName is not empty and your content is [\"+contentModalityName+\"]\", () => {\r",
											"    if (pm.expect(contentModalityName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentModalityName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentModalityName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreName = dataTransaction.transaction_acquirer.store.name;\r",
											"pm.test(\"Validate if the contentStoreName is not empty and your content is [\"+contentStoreName+\"]\", () => {\r",
											"    if (pm.expect(contentStoreName).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStoreName is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStoreName is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCnpj = dataTransaction.transaction_acquirer.store.cnpj;\r",
											"pm.test(\"Validate if the contentStoreCnpj is not empty and your content is [\"+contentStoreCnpj+\"]\", () => {\r",
											"    if (pm.expect(contentStoreCnpj).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStoreCnpj is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStoreCnpj is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPlan_type = dataTransaction.transaction_acquirer.plan_type;\r",
											"pm.test(\"Validate if the plan_type is not empty and your content is [\"+contentPlan_type+\"]\", () => {\r",
											"    if (pm.expect(contentStoreCnpj).to.be.a('string')){\r",
											"        pm.test(\"Yes, plan_type is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, plan_type is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_type = dataTransaction.transaction_acquirer.capture_type;\r",
											"pm.test(\"Validate if the capture_type is not empty and your content is [\"+contentCapture_type+\"]\", () => {\r",
											"    if (pm.expect(contentCapture_type).to.be.a('string')){\r",
											"        pm.test(\"Yes, capture_type is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, capture_type is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installments = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].acquirer_trs_id;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installments);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installments is not empty and your content is [\"+contentAcquirer_trs_installments+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installments).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installments is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installments is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsInstallment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsInstallment);\r",
											"pm.test(\"Validate if the acquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsInstallment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsInstallment).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsAmount = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].amount;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsAmount);\r",
											"pm.test(\"Validate if the acquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsAmount+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsAmount).to.be.a('number')){\r",
											"        pm.test(\"Yes, acquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, acquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsReceipt_prevision_id = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].receipt_prevision_id;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsReceipt_prevision_id);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsReceipt_prevision_id is not empty and your content is [\"+contentAcquirer_trs_installmentsReceipt_prevision_id+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsReceipt_prevision_id).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsReceipt_prevision_id is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsReceipt_prevision_id is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsReceipt_prevision_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].receipt_prevision_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsReceipt_prevision_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsReceipt_prevision_date is not empty and your content is [\"+contentAcquirer_trs_installmentsReceipt_prevision_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsReceipt_prevision_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsReceipt_prevision_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsReceipt_prevision_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationInsert_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.insert_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationInsert_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationInsert_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationInsert_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationInsert_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationInsert_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationInsert_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationAcquirer_trs_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.acquirer_trs_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationAcquirer_trs_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationAcquirer_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationAcquirer_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationAcquirer_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationStore_trs_date = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationStore_trs_date);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationStore_trs_date is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationStore_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationStore_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationStore_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationStore_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationStore_installment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.store_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationStore_installment);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationStore_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationStore_installment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationStore_installment).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationStore_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationStore_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationAcquirer_installment = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationAcquirer_installment);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationAcquirer_installment is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationAcquirer_installment+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationAcquirer_installment).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationAcquirer_installment is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationAcquirer_installment is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationMv_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.mv_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationMv_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationMv_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationMv_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationMv_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationMv_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationMv_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationMf_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.mf_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationMf_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationMf_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationMf_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationMf_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationMf_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationMf_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationEf_status = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.ef_status;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationEf_status);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationEf_status is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationEf_status+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationEf_status).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationEf_status is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationEf_status is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsConciliationFee_divergence = dataTransaction.transaction_acquirer.acquirer_trs_installments[0].conciliation.fee_divergence;\r",
											"console.log(\"Aqui: \"+contentAcquirer_trs_installmentsConciliationFee_divergence);\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsConciliationFee_divergence is not empty and your content is [\"+contentAcquirer_trs_installmentsConciliationFee_divergence+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_trs_installmentsConciliationFee_divergence).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentAcquirer_trs_installmentsConciliationFee_divergence is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_trs_installmentsConciliationFee_divergence is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/262118926/2019-08-14T17:15:34Z",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"262118926",
										"2019-08-14T17:15:34Z"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca Transação_Conciliação perfil GLOJAS Busca PATH Store ID_DATE_STORE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9fc57f4-1fc8-4ec9-8c14-f55f9440d39e",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_id = dataTransaction.store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_id is not empty and your content is [\"+contentStore_trs_id+\"]\", () => {\r",
											"    if (pm.expect(contentStore_trs_id).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentStore_trs_id is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStore_trs_id is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_date = dataTransaction.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_date is not empty and your content is [\"+contentStore_trs_date+\"]\", () => {\r",
											"    if (pm.expect(contentStore_trs_date).to.be.a('string')){\r",
											"        pm.test(\"Yes, contentStore_trs_date is not empty and is type string!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentStore_trs_date is empty or not is type string!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTef_nsu = dataTransaction.tef_nsu;\r",
											"console.log(\"Aqui: \"+contentTef_nsu);\r",
											"pm.test(\"Validate if the contentTef_nsu is not empty and your content is [\"+contentTef_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentTef_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentTef_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentTef_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_nsu = dataTransaction.acquirer_nsu;\r",
											"console.log(\"Aqui: \"+contentAcquirer_nsu);\r",
											"pm.test(\"Validate if the contentAcquirer_nsu is not empty and your content is [\"+contentAcquirer_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentAcquirer_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentAcquirer_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentAcquirer_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTerminal_nsu = dataTransaction.terminal_nsu;\r",
											"console.log(\"Aqui: \"+contentTerminal_nsu);\r",
											"pm.test(\"Validate if the contentTerminal_nsu is not empty and your content is [\"+contentTerminal_nsu+\"]\", () => {\r",
											"    if (pm.expect(contentTerminal_nsu).to.be.a('number')){\r",
											"        pm.test(\"Yes, contentTerminal_nsu is not empty and is type number!\"); \r",
											"    } else{\r",
											"         pm.test(\"ERROR, contentTerminal_nsu is empty or not is type number!\"); \r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTax_coupon = dataTransaction.tax_coupon;\r",
											"console.log(\"Aqui: \"+contentTax_coupon);\r",
											"pm.test(\"Validate if the contentTax_coupon is not empty and your content is [\"+contentTax_coupon+\"]\", () => {\r",
											"    pm.expect(contentTax_coupon).to.be.a('string')\r",
											"    pm.expect(contentTax_coupon.length).not.eql(0)\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthorization_code = dataTransaction.authorization_code;\r",
											"console.log(\"Aqui: \"+contentAuthorization_code);\r",
											"pm.test(\"Validate if the contentAuthorization_code is not empty and your content is [\"+contentAuthorization_code+\"]\", () => {\r",
											"    pm.expect(contentAuthorization_code).to.be.a('string')\r",
											"    pm.expect(contentAuthorization_code.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerId = dataTransaction.acquirer.id;\r",
											"console.log(\"Aqui: \"+contentAcquirerId);\r",
											"pm.test(\"Validate if the contentAcquirerId is not empty and your content is [\"+contentAcquirerId+\"]\", () => {\r",
											"    pm.expect(contentAcquirerId).to.be.a('number')\r",
											"    pm.expect(contentAcquirerId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerName = dataTransaction.acquirer.name;\r",
											"console.log(\"Aqui: \"+contentAcquirerName);\r",
											"pm.test(\"Validate if the contentAcquirerName is not empty and your content is [\"+contentAcquirerName+\"]\", () => {\r",
											"    pm.expect(contentAcquirerName).to.be.a('string')\r",
											"    pm.expect(contentAcquirerName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerCode = dataTransaction.acquirer.code;\r",
											"console.log(\"Aqui: \"+contentAcquirerCode);\r",
											"pm.test(\"Validate if the contentAcquirerName is not empty and your content is [\"+contentAcquirerCode+\"]\", () => {\r",
											"    pm.expect(contentAcquirerCode).to.be.a('string')\r",
											"    pm.expect(contentAcquirerCode.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentbrandId = dataTransaction.brand.id;\r",
											"console.log(\"Aqui: \"+contentbrandId);\r",
											"pm.test(\"Validate if the contentbrandId is not empty and your content is [\"+contentbrandId+\"]\", () => {\r",
											"    pm.expect(contentbrandId).to.be.a('number')\r",
											"    pm.expect(contentbrandId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandName = dataTransaction.brand.name;\r",
											"console.log(\"Aqui: \"+contentBrandName);\r",
											"pm.test(\"Validate if the contentBrandName is not empty and your content is [\"+contentBrandName+\"]\", () => {\r",
											"    pm.expect(contentBrandName).to.be.a('string')\r",
											"    pm.expect(contentBrandName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandCode = dataTransaction.brand.code;\r",
											"console.log(\"Aqui: \"+contentBrandCode);\r",
											"pm.test(\"Validate if the contentBrandCode is not empty and your content is [\"+contentBrandCode+\"]\", () => {\r",
											"    pm.expect(contentBrandCode).to.be.a('string')\r",
											"    pm.expect(contentBrandCode.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityId = dataTransaction.modality.id;\r",
											"console.log(\"Aqui: \"+contentModalityId);\r",
											"pm.test(\"Validate if the contentModalityId is not empty and your content is [\"+contentModalityId+\"]\", () => {\r",
											"    pm.expect(contentModalityId).to.be.a('number')\r",
											"    pm.expect(contentModalityId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityName = dataTransaction.modality.name;\r",
											"console.log(\"Aqui: \"+contentModalityName);\r",
											"pm.test(\"Validate if the contentModalityName is not empty and your content is [\"+contentModalityName+\"]\", () => {\r",
											"    pm.expect(contentModalityName).to.be.a('string')\r",
											"    pm.expect(contentModalityName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreId = dataTransaction.store.id;\r",
											"console.log(\"Aqui: \"+contentStoreId);\r",
											"pm.test(\"Validate if the contentStoreId is not empty and your content is [\"+contentStoreId+\"]\", () => {\r",
											"    pm.expect(contentStoreId).to.be.a('number')\r",
											"    pm.expect(contentStoreId.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreName = dataTransaction.store.name;\r",
											"console.log(\"Aqui: \"+contentStoreName);\r",
											"pm.test(\"Validate if the contentStoreName is not empty and your content is [\"+contentStoreName+\"]\", () => {\r",
											"    pm.expect(contentStoreName).to.be.a('string')\r",
											"    pm.expect(contentStoreName.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCode = dataTransaction.store.code;\r",
											"console.log(\"Aqui: \"+contentStoreCode);\r",
											"pm.test(\"Validate if the contentStoreCode is not empty and your content is [\"+contentStoreCode+\"]\", () => {\r",
											"    pm.expect(contentStoreCode).to.be.a('string')\r",
											"    pm.expect(contentStoreCode.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCnpj = dataTransaction.store.cnpj;\r",
											"console.log(\"Aqui: \"+contentStoreCnpj);\r",
											"pm.test(\"Validate if the contentStoreCnpj is not empty and your content is [\"+contentStoreCnpj+\"]\", () => {\r",
											"    pm.expect(contentStoreCnpj).to.be.a('string')\r",
											"    pm.expect(contentStoreCnpj.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTrs_info = dataTransaction.trs_info;\r",
											"console.log(\"Aqui: \"+contentTrs_info);\r",
											"pm.test(\"Validate if the contentTrs_info is not empty and your content is [\"+contentTrs_info+\"]\", () => {\r",
											"    pm.expect(contentTrs_info).to.be.a('string')\r",
											"    pm.expect(contentTrs_info.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAmount = dataTransaction.amount;\r",
											"console.log(\"Aqui: \"+contentTrs_info);\r",
											"pm.test(\"Validate if the contentAmount is not empty and your content is [\"+contentAmount+\"]\", () => {\r",
											"    pm.expect(contentAmount).to.be.a('number')\r",
											"    pm.expect(contentAmount.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentNumber_installments = dataTransaction.number_installments;\r",
											"console.log(\"Aqui: \"+contentNumber_installments);\r",
											"pm.test(\"Validate if the contentNumber_installments is not empty and your content is [\"+contentNumber_installments+\"]\", () => {\r",
											"    pm.expect(contentNumber_installments).to.be.a('number')\r",
											"    pm.expect(contentNumber_installments.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAccounting_date = dataTransaction.accounting_date;\r",
											"console.log(\"Aqui: \"+contentAccounting_date);\r",
											"pm.test(\"Validate if the contentAccounting_date is not empty and your content is [\"+contentAccounting_date+\"]\", () => {\r",
											"    pm.expect(contentAccounting_date).to.be.a('string')\r",
											"    pm.expect(contentAccounting_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_type = dataTransaction.capture_type;\r",
											"console.log(\"Aqui: \"+contentCapture_type);\r",
											"pm.test(\"Validate if the contentCapture_type is not empty and your content is [\"+contentCapture_type+\"]\", () => {\r",
											"    pm.expect(contentCapture_type).to.be.a('string')\r",
											"    pm.expect(contentCapture_type.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStatus = dataTransaction.status;\r",
											"console.log(\"Aqui: \"+contentStatus);\r",
											"pm.test(\"Validate if the contentStatus is not empty and your content is [\"+contentStatus+\"]\", () => {\r",
											"    pm.expect(contentStatus).to.be.a('string')\r",
											"    pm.expect(contentStatus.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPlan_type = dataTransaction.plan_type;\r",
											"console.log(\"Aqui: \"+contentPlan_type);\r",
											"pm.test(\"Validate if the contentPlan_type is not empty and your content is [\"+contentPlan_type+\"]\", () => {\r",
											"    pm.expect(contentPlan_type).to.be.a('string')\r",
											"    pm.expect(contentPlan_type.length).not.eql(0)\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthentication_code = dataTransaction.authentication_code;\r",
											"console.log(\"Aqui: \"+contentAuthentication_code);\r",
											"pm.test(\"Validate if the contentAuthentication_code is not empty and your content is [\"+contentAuthentication_code+\"]\", () => {\r",
											"    pm.expect(contentAuthentication_code).to.be.a('string')\r",
											"    pm.expect(contentAuthentication_code.length).not.eql(0)\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTid = dataTransaction.tid;\r",
											"console.log(\"Aqui: \"+contentTid);\r",
											"pm.test(\"Validate if the contentTid is not empty and your content is [\"+contentTid+\"]\", () => {\r",
											"    pm.expect(contentTid).to.be.a('string')\r",
											"    pm.expect(contentTid.length).not.eql(0)\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_date = dataTransaction.capture_date;\r",
											"console.log(\"Aqui: \"+contentCapture_date);\r",
											"pm.test(\"Validate if the contentCapture_date is not empty and your content is [\"+contentCapture_date+\"]\", () => {\r",
											"    pm.expect(contentCapture_date).to.be.a('string')\r",
											"    pm.expect(contentCapture_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPdv_operator_code = dataTransaction.pdv_operator_code;\r",
											"console.log(\"Aqui: \"+contentPdv_operator_code);\r",
											"pm.test(\"Validate if the contentPdv_operator_code is not empty and your content is [\"+contentPdv_operator_code+\"]\", () => {\r",
											"    pm.expect(contentPdv_operator_code).to.be.a('string')\r",
											"    pm.expect(contentPdv_operator_code.length).not.eql(0)\r",
											"});*/\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentOrder_id = dataTransaction.order_id;\r",
											"console.log(\"Aqui: \"+contentOrder_id);\r",
											"pm.test(\"Validate if the contentOrder_id is not empty and your content is [\"+contentOrder_id+\"]\", () => {\r",
											"    pm.expect(contentOrder_id).to.be.a('string')\r",
											"    pm.expect(contentOrder_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_trs_id = dataTransaction.store_trs_installments[0].store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_trs_id is not empty and your content is [\"+contentStore_trs_installmentsStore_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_trs_date = dataTransaction.store_trs_installments[0].store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_trs_date is not empty and your content is [\"+contentStore_trs_installmentsStore_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsStore_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsStore_installments = dataTransaction.store_trs_installments[0].store_installments;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsStore_installments);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsStore_installments is not empty and your content is [\"+contentStore_trs_installmentsStore_installments+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsStore_installments).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsStore_installments.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsAmount = dataTransaction.store_trs_installments[0].amount;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsAmount);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsAmount is not empty and your content is [\"+contentStore_trs_installmentsAmount+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsAmount).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsAmount.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationConciliation_id = dataTransaction.store_trs_installments[0].conciliation.conciliation_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationConciliation_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationConciliation_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationConciliation_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationConciliation_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationConciliation_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationInsert_date = dataTransaction.store_trs_installments[0].conciliation.insert_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationInsert_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationInsert_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationInsert_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationInsert_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationInsert_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_trs_id = dataTransaction.store_trs_installments[0].conciliation.acquirer_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_trs_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_trs_date = dataTransaction.store_trs_installments[0].conciliation.acquirer_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_trs_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_trs_id = dataTransaction.store_trs_installments[0].conciliation.store_trs_id;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_trs_id);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_trs_id is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_trs_id+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_id).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_trs_date = dataTransaction.store_trs_installments[0].conciliation.store_trs_date;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_trs_date);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_trs_date is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_trs_date+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_date).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationStore_installment = dataTransaction.store_trs_installments[0].conciliation.store_installment;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationStore_installment);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationStore_installment is not empty and your content is [\"+contentStore_trs_installmentsConciliationStore_installment+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_installment).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationStore_installment.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationAcquirer_installment = dataTransaction.store_trs_installments[0].conciliation.acquirer_installment;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationAcquirer_installment);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationAcquirer_installment is not empty and your content is [\"+contentStore_trs_installmentsConciliationAcquirer_installment+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_installment).to.be.a('number')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationAcquirer_installment.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationMv_status = dataTransaction.store_trs_installments[0].conciliation.mv_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationMv_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationMv_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationMv_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMv_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMv_status.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationMf_status = dataTransaction.store_trs_installments[0].conciliation.mf_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationMf_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationMf_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationMf_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMf_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationMf_status.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStore_trs_installmentsConciliationEf_status = dataTransaction.store_trs_installments[0].conciliation.ef_status;\r",
											"console.log(\"Aqui: \"+contentStore_trs_installmentsConciliationEf_status);\r",
											"pm.test(\"Validate if the contentStore_trs_installmentsConciliationEf_status is not empty and your content is [\"+contentStore_trs_installmentsConciliationEf_status+\"]\", () => {\r",
											"    pm.expect(contentStore_trs_installmentsConciliationEf_status).to.be.a('string')\r",
											"    pm.expect(contentStore_trs_installmentsConciliationEf_status.length).not.eql(0)\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tokenPerfilGLojas}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/99940246048/2019-07-31T02:14:40Z/store",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"99940246048",
										"2019-07-31T02:14:40Z",
										"store"
									],
									"query": [
										{
											"key": "id",
											"value": "82130",
											"disabled": true
										},
										{
											"key": "store_ids",
											"value": "82132",
											"disabled": true
										},
										{
											"key": "acquirer_id",
											"value": "1",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "capture_type",
											"value": "POS",
											"disabled": true
										},
										{
											"key": "capture_method_id",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3ace379c-1311-4846-a2f3-bc05913edca6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8c28f143-d17b-41ac-b1e1-00fdee54c405",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "REALIZA CONCILIAÇÃO MANUAL",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fc5b68d-15e0-4c12-9c32-7dd65e801f0c",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realiza Conciliação Manual Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75264cd5-0bb4-43fb-9dbb-ac6baa7b5d3a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'Created''\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n[\r\n  {\r\n    \"conciliation_id\": 215750215,\r\n    \"insert_date\": \"2018-03-05T03:51:04Z\",\r\n    \"conciliation_type\": \"TRANSACTION\",\r\n    \"manual_conciliation_status\": \"DIVERGENCE\",\r\n    \"divergence_type\": \"DATE\",\r\n    \"conciliation_by_transaction\": true,\r\n    \"justification_id\": 12,\r\n    \"description\": \"Teste Conciliação Manual\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/manual-conciliations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"manual-conciliations"
									],
									"query": [
										{
											"key": "transaction_id",
											"value": null,
											"disabled": true
										},
										{
											"key": "Client user identifier",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Distribuidor",
					"item": [
						{
							"name": "Gerar Token Perfil DISTRIBUIDOR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01b50572-2a3c-4a13-a10b-1fc7006ef8f3",
										"exec": [
											"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realiza Conciliação Manual Perfil Distribuidor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bd8b4a6-f2c3-4c7e-b29c-1d25f79f5360",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'Created''\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n[\r\n  {\r\n    \"conciliation_id\": 128039397,\r\n    \"insert_date\": \"2017-03-03T09:16:36Z\",\r\n    \"conciliation_type\": \"TRANSACTION\",\r\n    \"manual_conciliation_status\": \"DIVERGENCE\",\r\n    \"divergence_type\": \"DATE\",\r\n    \"conciliation_by_transaction\": true,\r\n    \"justification_id\": 12,\r\n    \"description\": \"Teste Conciliação Manual\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://conciliation-transactional-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/transactions/manual-conciliations/",
									"protocol": "https",
									"host": [
										"conciliation-transactional-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"transactions",
										"manual-conciliations",
										""
									],
									"query": [
										{
											"key": "transaction_id",
											"value": null,
											"disabled": true
										},
										{
											"key": "Client user identifier",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil GLojas",
					"item": [
						{
							"name": "Gerar Token Perfil GRUPO LOJAS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d7a7d52-b360-41f7-a39c-09a234b81606",
										"exec": [
											"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realiza Conciliação Manual Perfil GLojas",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83847000-06b6-4551-8de0-d6ef87e543c9",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'Created''\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n[\r\n  {\r\n    \"conciliation_id\": 262118927,\r\n    \"insert_date\": \"2019-08-14T17:15:36Z\",\r\n    \"conciliation_type\": \"TRANSACTION\",\r\n    \"manual_conciliation_status\": \"DIVERGENCE\",\r\n    \"divergence_type\": \"DATE\",\r\n    \"conciliation_by_transaction\": true,\r\n    \"justification_id\": 12,\r\n    \"description\": \"Teste Conciliação Manual\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://conciliation-transactional-ms-portal-auttar-des.openshift-dev.getnet.com.br/v1/transactions/manual-conciliations/",
									"protocol": "https",
									"host": [
										"conciliation-transactional-ms-portal-auttar-des",
										"openshift-dev",
										"getnet",
										"com",
										"br"
									],
									"path": [
										"v1",
										"transactions",
										"manual-conciliations",
										""
									],
									"query": [
										{
											"key": "transaction_id",
											"value": null,
											"disabled": true
										},
										{
											"key": "Client user identifier",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CONSULTA RETORNO ADQUIRENTE",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7517a09-d0f8-47c1-9e27-4a58e4468022",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca Transação Adquirente Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39239abd-16c3-4588-bc9a-c0412462b0ba",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_id = dataTransaction.acquirer_trs_id;\r",
											"pm.test(\"Validate if the contentAcquirer_trs_id is present, is String and not empty - ID: \" +contentAcquirer_trs_id, () => {\r",
											"    pm.expect(contentAcquirer_trs_id).to.equal(contentAcquirer_trs_id);\r",
											"    pm.expect(contentAcquirer_trs_id).to.be.a('number')\r",
											"    pm.expect(contentAcquirer_trs_id.length).not.eql(0)\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_date = dataTransaction.acquirer_trs_date;\r",
											"pm.test(\"Validate if the contentAcquirer_trs_date is present, is String and not empty - ID: \" +contentAcquirer_trs_date, () => {\r",
											"    pm.expect(contentAcquirer_trs_date).to.equal(contentAcquirer_trs_date);\r",
											"    pm.expect(contentAcquirer_trs_date).to.be.a('String')\r",
											"    pm.expect(contentAcquirer_trs_date.length).not.eql(0)\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTef_nsu = dataTransaction.tef_nsu;\r",
											"pm.test(\"Validate if the contentTef_nsu is present, is String and not empty - ID: \" +contentTef_nsu, () => {\r",
											"    pm.expect(contentTef_nsu).to.equal(contentTef_nsu);\r",
											"    pm.expect(contentTef_nsu).to.be.a('number')\r",
											"    pm.expect(contentTef_nsu.length).not.eql(0)\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_nsu = dataTransaction.acquirer_nsu;\r",
											"pm.test(\"Validate if the contentAcquirer_nsu is present, is String and not empty - ID: \" +contentAcquirer_nsu, () => {\r",
											"    pm.expect(contentAcquirer_nsu).to.equal(contentAcquirer_nsu);\r",
											"    pm.expect(contentAcquirer_nsu).to.be.a('number')\r",
											"    pm.expect(contentAcquirer_nsu.length).not.eql(0)\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_reject_nsu = dataTransaction.acquirer_reject_nsu;\r",
											"pm.test(\"Validate if the contentAcquirer_reject_nsu is present, is String and not empty - ID: \" +contentAcquirer_reject_nsu, () => {\r",
											"    pm.expect(contentAcquirer_reject_nsu).to.equal(contentAcquirer_reject_nsu);\r",
											"    pm.expect(contentAcquirer_reject_nsu).to.be.a('number')\r",
											"    pm.expect(contentAcquirer_reject_nsu.length).not.eql(0)\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAuthorization_code = dataTransaction.authorization_code;\r",
											"pm.test(\"Validate if the contentAuthorization_code is present, is String and not empty - ID: \" +contentAuthorization_code, () => {\r",
											"    pm.expect(contentAuthorization_code).to.equal(contentAuthorization_code);\r",
											"    pm.expect(contentAuthorization_code).to.be.a('number')\r",
											"    pm.expect(contentAuthorization_code.length).not.eql(0)\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTransaction_info = dataTransaction.transaction_info;\r",
											"pm.test(\"Validate if the contentTransaction_info is present, is String and not empty - ID: \" +contentTransaction_info, () => {\r",
											"    pm.expect(contentTransaction_info).to.equal(contentTransaction_info);\r",
											"    pm.expect(contentTransaction_info).to.be.a('String')\r",
											"    pm.expect(contentTransaction_info.length).not.eql(0)\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAmount = dataTransaction.amount;\r",
											"pm.test(\"Validate if the contentAmount is present, is String and not empty - ID: \" +contentAmount, () => {\r",
											"    pm.expect(contentAmount).to.equal(contentAmount);\r",
											"    pm.expect(contentAmount).to.be.a('number')\r",
											"    pm.expect(contentAmount.length).not.eql(0)\r",
											"});   \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentInstallments_number = dataTransaction.installments_number;\r",
											"pm.test(\"Validate if the contentInstallments_number is present, is String and not empty - ID: \" +contentInstallments_number, () => {\r",
											"    pm.expect(contentInstallments_number).to.equal(contentInstallments_number);\r",
											"    pm.expect(contentInstallments_number).to.be.a('number')\r",
											"    pm.expect(contentInstallments_number.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStatus = dataTransaction.status;\r",
											"pm.test(\"Validate if the contentStatus is present, is String and not empty - ID: \" +contentStatus, () => {\r",
											"    pm.expect(contentStatus).to.equal(contentStatus);\r",
											"    pm.expect(contentStatus).to.be.a('string')\r",
											"    pm.expect(contentStatus.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPos_number = dataTransaction.pos_number;\r",
											"pm.test(\"Validate if the contentPos_number is present, is String and not empty - ID: \" +contentPos_number, () => {\r",
											"    pm.expect(contentPos_number).to.equal(contentPos_number);\r",
											"    pm.expect(contentPos_number).to.be.a('number')\r",
											"    pm.expect(contentPos_number.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentTerminal_number = dataTransaction.terminal_number;\r",
											"pm.test(\"Validate if the contentTerminal_number is present, is String and not empty - ID: \" +contentTerminal_number, () => {\r",
											"    pm.expect(contentTerminal_number).to.equal(contentTerminal_number);\r",
											"    pm.expect(contentTerminal_number).to.be.a('string')\r",
											"    pm.expect(contentTerminal_number.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_date = dataTransaction.capture_date;\r",
											"pm.test(\"Validate if the contentCapture_date is present, is String and not empty - ID: \" +contentCapture_date, () => {\r",
											"    pm.expect(contentCapture_date).to.equal(contentCapture_date);\r",
											"    pm.expect(contentCapture_date).to.be.a('string')\r",
											"    pm.expect(contentCapture_date.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerId = dataTransaction.acquirer.id;\r",
											"pm.test(\"Validate if the contentAcquirerId is present, is String and not empty - ID: \" +contentAcquirerId, () => {\r",
											"    pm.expect(contentAcquirerId).to.equal(contentAcquirerId);\r",
											"    pm.expect(contentAcquirerId).to.be.a('number')\r",
											"    pm.expect(contentAcquirerId.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerName = dataTransaction.acquirer.name;\r",
											"pm.test(\"Validate if the contentAcquirerName is present, is String and not empty - ID: \" +contentAcquirerName, () => {\r",
											"    pm.expect(contentAcquirerName).to.equal(contentAcquirerName);\r",
											"    pm.expect(contentAcquirerName).to.be.a('string')\r",
											"    pm.expect(contentAcquirerName.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirerCode = dataTransaction.acquirer.code;\r",
											"pm.test(\"Validate if the contentAcquirerCode is present, is String and not empty - ID: \" +contentAcquirerCode, () => {\r",
											"    pm.expect(contentAcquirerCode).to.equal(contentAcquirerCode);\r",
											"    pm.expect(contentAcquirerCode).to.be.a('string')\r",
											"    pm.expect(contentAcquirerCode.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandId = dataTransaction.brand.id;\r",
											"pm.test(\"Validate if the contentBrandId is present, is String and not empty - ID: \" +contentBrandId, () => {\r",
											"    pm.expect(contentBrandId).to.equal(contentBrandId);\r",
											"    pm.expect(contentBrandId).to.be.a('number')\r",
											"    pm.expect(contentBrandId.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentBrandName = dataTransaction.brand.name;\r",
											"pm.test(\"Validate if the contentBrandName is present, is String and not empty - ID: \" +contentBrandName, () => {\r",
											"    pm.expect(contentBrandName).to.equal(contentBrandName);\r",
											"    pm.expect(contentBrandName).to.be.a('string')\r",
											"    pm.expect(contentBrandName.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityId = dataTransaction.modality.id;\r",
											"pm.test(\"Validate if the contentModalityId is present, is String and not empty - ID: \" +contentModalityId, () => {\r",
											"    pm.expect(contentModalityId).to.equal(contentModalityId);\r",
											"    pm.expect(contentModalityId).to.be.a('number')\r",
											"    pm.expect(contentModalityId.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentModalityName = dataTransaction.modality.name;\r",
											"pm.test(\"Validate if the contentModalityName is present, is String and not empty - ID: \" +contentModalityName, () => {\r",
											"    pm.expect(contentModalityName).to.equal(contentModalityName);\r",
											"    pm.expect(contentModalityName).to.be.a('string')\r",
											"    pm.expect(contentModalityName.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreName = dataTransaction.store.name;\r",
											"pm.test(\"Validate if the contentStoreName is present, is String and not empty - ID: \" +contentStoreName, () => {\r",
											"    pm.expect(contentStoreName).to.equal(contentStoreName);\r",
											"    pm.expect(contentStoreName).to.be.a('string')\r",
											"    pm.expect(contentStoreName.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCode = dataTransaction.store.code;\r",
											"pm.test(\"Validate if the contentStoreCode is present, is String and not empty - ID: \" +contentStoreCode, () => {\r",
											"    pm.expect(contentStoreCode).to.equal(contentStoreCode);\r",
											"    pm.expect(contentStoreCode).to.be.a('string')\r",
											"    pm.expect(contentStoreCode.length).not.eql(0)\r",
											"}); \r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentStoreCnpj = dataTransaction.store.cnpj;\r",
											"pm.test(\"Validate if the contentStoreCnpj is present, is String and not empty - ID: \" +contentStoreCnpj, () => {\r",
											"    pm.expect(contentStoreCnpj).to.equal(contentStoreCnpj);\r",
											"    pm.expect(contentStoreCnpj).to.be.a('string')\r",
											"    pm.expect(contentStoreCnpj.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentPlan_type = dataTransaction.plan_type;\r",
											"pm.test(\"Validate if the contentPlan_type is present, is String and not empty - ID: \" +contentPlan_type, () => {\r",
											"    pm.expect(contentPlan_type).to.equal(contentPlan_type);\r",
											"    pm.expect(contentPlan_type).to.be.a('string')\r",
											"    pm.expect(contentPlan_type.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentCapture_type = dataTransaction.capture_type;\r",
											"pm.test(\"Validate if the contentCapture_type is present, is String and not empty - ID: \" +contentCapture_type, () => {\r",
											"    pm.expect(contentCapture_type).to.equal(contentCapture_type);\r",
											"    pm.expect(contentCapture_type).to.be.a('string')\r",
											"    pm.expect(contentCapture_type.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsAcquirer_trs_id = dataTransaction.acquirer_trs_installments[0].acquirer_trs_id;\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsAcquirer_trs_id is present, is String and not empty - ID: \" +contentAcquirer_trs_installmentsAcquirer_trs_id, () => {\r",
											"    pm.expect(contentAcquirer_trs_installmentsAcquirer_trs_id).to.equal(contentAcquirer_trs_installmentsAcquirer_trs_id);\r",
											"    pm.expect(contentAcquirer_trs_installmentsAcquirer_trs_id).to.be.a('number')\r",
											"    pm.expect(contentAcquirer_trs_installmentsAcquirer_trs_id.length).not.eql(0)\r",
											"});\r",
											"\r",
											"var dataTransaction = JSON.parse(responseBody);\r",
											"const contentAcquirer_trs_installmentsAcquirer_trs_date = dataTransaction.acquirer_trs_installments[0].acquirer_trs_date;\r",
											"pm.test(\"Validate if the contentAcquirer_trs_installmentsAcquirer_trs_date is present, is String and not empty - ID: \" +contentAcquirer_trs_installmentsAcquirer_trs_date, () => {\r",
											"    pm.expect(contentAcquirer_trs_installmentsAcquirer_trs_date).to.equal(contentAcquirer_trs_installmentsAcquirer_trs_date);\r",
											"    pm.expect(contentAcquirer_trs_installmentsAcquirer_trs_date).to.be.a('string')\r",
											"    pm.expect(contentAcquirer_trs_installmentsAcquirer_trs_date.length).not.eql(0)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/44439391/2018-01-01T23:40:10Z/acquirer",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"44439391",
										"2018-01-01T23:40:10Z",
										"acquirer"
									]
								}
							},
							"response": []
						},
						{
							"name": "ERRO Busca Transação Adquirente Perfil Cliente SEM Acquires_trs_DATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b426806b-3a6d-438e-b6e7-b16bc46953f3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'BAD REQUEST''\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/44439391/acquirer",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"44439391",
										"acquirer"
									]
								}
							},
							"response": []
						},
						{
							"name": "ERRO Busca Transação Adquirente Perfil Cliente SEM Acquires_trs_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "397b1704-307b-48ea-8ae4-b7d88188f7e1",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'BAD REQUEST''\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/2018-01-01T23:40:10Z/acquirer",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"2018-01-01T23:40:10Z",
										"acquirer"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Distribuidor",
					"item": [
						{
							"name": "Gerar Token Perfil DISTRIBUIDOR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99fdf4e0-d9d9-4abb-8038-44fa16b81558",
										"exec": [
											"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Glojas",
					"item": [
						{
							"name": "Gerar Token Perfil GRUPO LOJAS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02f74dfc-257a-46a3-b155-a2408f24189f",
										"exec": [
											"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CONSULTA RETORNO TIPO DE AJUSTE",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2a2cff7-9028-4372-b74b-ba0aec3ee530",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno VAZIO sem Header tipo de Ajuste Pefil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66937d01-cb18-4d69-83e8-f08527382a44",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var contentResponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the contentResponse adjustment is present and is empty\", function () {\r",
											"    pm.expect(contentResponse.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/adjustment-types",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"adjustment-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno tipo de Ajuste Pefil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b1038d6-72b0-4897-9d60-02a6fe401bfb",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var contentResponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the contentResponse adjustment is present and is empty\", function () {\r",
											"    pm.expect(contentResponse.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "transaction_id",
										"value": "teste123teste123",
										"type": "text"
									},
									{
										"key": "transaction_user",
										"value": "teste123teste123",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/adjustment-types",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"adjustment-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno tipo de Ajuste Pefil Cliente POR ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14222ad7-c557-42e7-97d0-b3d2a1c09a45",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataReponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ID is present, is Number and to equal = \"+dataReponse.id, () => {\r",
											"    pm.expect(dataReponse.id).to.equal(17);\r",
											"    pm.expect(dataReponse.id).to.be.a('number')\r",
											"    pm.expect(dataReponse.id.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "transaction_id",
										"type": "text",
										"value": "teste123teste123"
									},
									{
										"key": "transaction_user",
										"type": "text",
										"value": "teste123teste123"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/adjustment-types/17",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"adjustment-types",
										"17"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d19f90e8-f49b-43d4-986e-af4500cc9ab6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "89f9c658-c08d-4f8d-8b57-baecd85a55de",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CONSULTA RETORNO MOTIVO DE AJUSTE",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e8c8e9a-8e7a-4352-a322-c555162226ee",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno VAZIO sem Header motivo de Ajuste Pefil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25937065-66d0-4821-8bf9-37cb54abe314",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var contentResponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the contentResponse adjustment is present and is empty\", function () {\r",
											"    pm.expect(contentResponse.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/adjustment-reasons",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"adjustment-reasons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno motivo de Ajuste Pefil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9358253d-3ab8-42ba-97a0-d2aff47875fe",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var contentResponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the contentResponse adjustment is present and is empty\", function () {\r",
											"    pm.expect(contentResponse.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "transaction_id",
										"value": "teste123teste123",
										"type": "text"
									},
									{
										"key": "transaction_user",
										"value": "teste123teste123",
										"type": "text"
									},
									{
										"key": "adjustmentReasonRequest",
										"value": "teste123teste123",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/adjustment-reasons",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"adjustment-reasons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno motivo de Ajuste Pefil Cliente POR ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee47c80c-48b5-44eb-a6e7-3f97b671c831",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataReponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ID is present, is Number and to equal = \"+dataReponse.id, () => {\r",
											"    pm.expect(dataReponse.id).to.equal(649);\r",
											"    pm.expect(dataReponse.id).to.be.a('number')\r",
											"    pm.expect(dataReponse.id.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "transaction_id",
										"type": "text",
										"value": "teste123teste123"
									},
									{
										"key": "transaction_user",
										"type": "text",
										"value": "teste123teste123"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/adjustment-reasons/649",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"adjustment-reasons",
										"649"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1dabcea2-5b85-4b54-983a-59366203ffbb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3206a0c2-44a7-4708-9b77-8eab91665d33",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CONSULTA RETORNO JUSTIFICATIVAS DE ACORDO",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e264bc9-9623-4e39-a8e4-bb51b26484ac",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno VAZIO sem Header Justificativa de Acordo Pefil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8364521-4036-4ffc-ae9f-87f836e7a789",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var contentResponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the contentResponse adjustment is present and is empty\", function () {\r",
											"    pm.expect(contentResponse.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/justifications",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"justifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno Justificativa de Acordo Pefil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20bf559a-89e0-4782-a4ba-e6f9283e3d06",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var contentResponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the contentResponse adjustment is present and is empty\", function () {\r",
											"    pm.expect(contentResponse.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "transaction_id",
										"value": "teste123teste123",
										"type": "text"
									},
									{
										"key": "transaction_user",
										"value": "teste123teste123",
										"type": "text"
									},
									{
										"key": "justificationRequest",
										"value": "teste123teste123",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/justifications",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"justifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca retorno Justificativa de Acordo Pefil Cliente POR ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b2acbd8-5214-4c3b-a1ec-23d384b5de27",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var dataReponse = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ID is present, is Number and to equal = \"+dataReponse.id, () => {\r",
											"    pm.expect(dataReponse.id).to.equal(14);\r",
											"    pm.expect(dataReponse.id).to.be.a('number')\r",
											"    pm.expect(dataReponse.id.length).not.eql(0)\r",
											"});   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "transaction_id",
										"type": "text",
										"value": "teste123teste123"
									},
									{
										"key": "transaction_user",
										"type": "text",
										"value": "teste123teste123"
									},
									{
										"key": "justificationRequest",
										"value": "teste123teste123",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/justifications/14",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"justifications",
										"14"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dd6134d7-3dc1-4c8b-9ea9-eac4145399c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ce53300d-fa67-493c-b188-96cc1b59b600",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR CONSULTA LIQUIDAÇÕES",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "461e68c2-dbb0-4a07-9758-a0a0775f7633",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente chain_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df2638f6-316f-4cde-a645-c74e2696a3bc",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "chain_id",
										"value": "4700",
										"type": "text",
										"disabled": true
									},
									{
										"key": "company_id",
										"value": "44072",
										"type": "text",
										"disabled": true
									},
									{
										"key": "store_id",
										"value": "82130",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente company_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "006112ad-b8ef-4a3d-b325-f8f3c498a464",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?begin_payment_date=2018-01-01&end_payment_date=2018-01-02&company_id=44072",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente acquire_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa660cf7-6b94-4ddb-900b-4db7a3fe2054",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&acquire_id=4",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente brand_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce7c9c19-6e44-4f8d-9ec8-635bb6db4e6c",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&brand_id=4502",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502"
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente modality_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "580caf1a-f0aa-4746-8e3f-b031f948ecfc",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&modality_id=4469",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente mf_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2d12643-53ce-4b2b-b00f-fd67731a2759",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&mf_status=AUTOMATICALLY_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente rv_num",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d088cde4-92c7-46a4-af6c-652f5e28924d",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&rv_num=945267106",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106"
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente plan_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad4f4139-e2ec-4e42-8488-c23baae4c00a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&plan_type=INSTALLMENT_WITHOUT_INTEREST",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST"
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente Bank_code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae2030d5-2620-442d-a52f-c794cd119bc7",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&bank_agency_number=003403",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										},
										{
											"key": "bank_agency_number",
											"value": "003403"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de Liquidação Perfil Cliente bank_agency_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "945b8475-1e97-4722-be9c-c9b6e60dd859",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});*/\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"/*\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });*/\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/settlements?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&bank_account_number=0013000706",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"settlements"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										},
										{
											"key": "bank_agency_number",
											"value": "003403",
											"disabled": true
										},
										{
											"key": "bank_account_number",
											"value": "0013000706"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ERRO Validar Consulta de Liquidação Perfil Cliente sem begin_payment_date e End",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66ebe42f-e961-4871-812c-03edbb4c9fa9",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'BAD REQUEST''\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/44439391/acquirer",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"44439391",
										"acquirer"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef0f37b4-6c18-4013-b6c2-dbe786510b4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7bf9f9a-4378-4a94-918f-ca2b2d06c099",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Distribuidor",
					"item": [
						{
							"name": "Gerar Token Perfil DISTRIBUIDOR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "666dff7c-71a0-491b-81f7-317ab81f00ea",
										"exec": [
											"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "701ef57b-ea57-4a2b-918f-ef4f99dc3c00",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "15914a3c-12de-46f5-8b60-0799bfe46d8d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Glojas",
					"item": [
						{
							"name": "Gerar Token Perfil GRUPO LOJAS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8711a05-7601-47a1-a184-783995002eb7",
										"exec": [
											"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d07024c6-3e3c-46e3-a490-5dda312d0c08",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2093409-6d13-419b-9d0f-c733ec6b7b79",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR CONSULTA DE DEPÓSITOS",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b1b5155-b6a1-4bdd-8297-12d4bd167502",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar ERRO Consulta depósitos SEM PARAM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51795dd3-a87f-4fca-9561-8c5712d5754a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'BAD REQUEST''\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "chain_id",
										"value": "4700",
										"type": "text",
										"disabled": true
									},
									{
										"key": "company_id",
										"value": "44072",
										"type": "text",
										"disabled": true
									},
									{
										"key": "store_id",
										"value": "82130",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01",
											"disabled": true
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02",
											"disabled": true
										}
									]
								},
								"description": " "
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param chain_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "167812a8-70d1-40cc-bc27-2ebfd7c3967d",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    */\r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "chain_id",
										"value": "4700",
										"type": "text",
										"disabled": true
									},
									{
										"key": "company_id",
										"value": "44072",
										"type": "text",
										"disabled": true
									},
									{
										"key": "store_id",
										"value": "82130",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param company_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4248a430-843b-40c2-b868-255a18d87cb3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    */\r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?begin_payment_date=2018-01-01&end_payment_date=2018-01-02&company_id=44072",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param acquire_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab6983ea-e06d-405b-9aea-d7d87325f805",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&acquire_id=4",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param brand_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77994004-6086-477e-b9aa-47a50de2d1ed",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&brand_id=4502",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502"
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param modality_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b549b2a-3e09-43c9-afd2-4767ffb39786",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&modality_id=4469",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param mf_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eedcd6e6-0fc0-4568-8e64-f851b91b70cc",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&mf_status=AUTOMATICALLY_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param rv_num",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85ede9dc-b076-45db-a193-f3e70c7009ac",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&rv_num=945267106",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106"
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param plan_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ac646c7-fa87-4b3d-bdad-189aa7262a1d",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&plan_type=INSTALLMENT_WITHOUT_INTEREST",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST"
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param Bank_code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a46d2e1-ac79-426b-90ed-4ff514221865",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&bank_code=033",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										},
										{
											"key": "bank_code",
											"value": "033"
										},
										{
											"key": "bank_agency_number",
											"value": "003403",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param Bank_agency_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a399387-b262-4cbe-91f7-851b04a4286b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&bank_agency_number=003403",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										},
										{
											"key": "bank_agency_number",
											"value": "003403"
										},
										{
											"key": "bank_account_number",
											"value": "0013000706",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param Bank_account_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1ead6a7-00dc-40c6-a1a2-ae4c34c5fbcd",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&bank_account_number=0013000706",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										},
										{
											"key": "bank_agency_number",
											"value": "003403",
											"disabled": true
										},
										{
											"key": "bank_account_number",
											"value": "0013000706"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ERRO Validar Consulta de Liquidação Perfil Cliente sem begin_payment_date e End",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "706992c9-a703-4994-b10f-4ecb2e674be3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'BAD REQUEST''\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/transactions/44439391/acquirer",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"transactions",
										"44439391",
										"acquirer"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad198d47-5126-4087-bd2c-f79e9c3ce03f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a60e64e-7b20-4060-acbe-1038fb67bc8c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Distribuidor",
					"item": [
						{
							"name": "Gerar Token Perfil DISTRIBUIDOR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "465d4eee-a3e7-49a0-ab79-732bc94ac600",
										"exec": [
											"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fb9adad-b72e-422a-b1d8-e527c6979ef4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e6ef7be1-2ce6-45db-bcec-0ab869cad95f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Glojas",
					"item": [
						{
							"name": "Gerar Token Perfil GRUPO LOJAS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f7d7716-b9bf-41f3-b09d-c061da5a5957",
										"exec": [
											"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a24b26d-3cb0-4280-9f0b-174fccb400f6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28403c8f-013e-4aa3-a3a6-39bfb8c0963d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d1882beb-6b26-46c6-aad1-5ae8c1d8a40c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1c868c04-72f9-42cf-b3d5-b2046c007224",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VALIDAR CONSULTA DE AJUSTE",
			"item": [
				{
					"name": "Perfil Cliente",
					"item": [
						{
							"name": "Gerar Token Perfil Cliente",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad038825-44a5-41c5-bc30-ab944eb2af9c",
										"exec": [
											"var token = JSON.parse(responseBody);\r",
											"pm.globals.set(\"token\", token.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado\",\r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar ERRO Consulta de ajustes SEM PARAM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68f76b19-83ba-454c-b14e-bece9e00c6b1",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'BAD REQUEST''\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "chain_id",
										"value": "4700",
										"type": "text",
										"disabled": true
									},
									{
										"key": "company_id",
										"value": "44072",
										"type": "text",
										"disabled": true
									},
									{
										"key": "store_id",
										"value": "82130",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/adjustments",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"adjustments"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01",
											"disabled": true
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02",
											"disabled": true
										}
									]
								},
								"description": " "
							},
							"response": []
						},
						{
							"name": "Validar Consulta de ajustes Perfil Cliente param chain_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2117c001-4e54-4cd4-937e-09f47aca98de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/adjustments?begin_payment_date=2018-01-01&end_payment_date=2018-01-02&store_ids=82131&begin_date=2017-12-27&end_date=2017-12-27",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"adjustments"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "store_ids",
											"value": "82131"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "begin_date",
											"value": "2017-12-27"
										},
										{
											"key": "end_date",
											"value": "2017-12-27"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param company_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85bdc146-a0e2-4a7d-a158-db257e448a9d",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });\r",
											"\r",
											"    */\r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?begin_payment_date=2018-01-01&end_payment_date=2018-01-02&company_id=44072",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700",
											"disabled": true
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param acquire_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e9ed548-1e93-4e25-8682-44359e5f4dde",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&acquire_id=4",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param brand_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a6d92d5-8472-4103-9c1a-ea363bb2e464",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&brand_id=4502",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502"
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param modality_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b28eb6d8-de8a-4a63-ada9-4c04ac7ca437",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&modality_id=4469",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param mf_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c11b0e5f-46f8-4007-9d3e-08a43a68f9d3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&mf_status=AUTOMATICALLY_CONCILIATED",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param rv_num",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bb70443-43d6-490d-95e4-e0a5b70a7225",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&rv_num=945267106",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106"
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param plan_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6d04a96-6ce2-4d04-bf72-4916e79b0dc9",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&plan_type=INSTALLMENT_WITHOUT_INTEREST",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST"
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param Bank_code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce7689fc-0c16-4930-8973-c89fdba93725",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&bank_code=033",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										},
										{
											"key": "bank_code",
											"value": "033"
										},
										{
											"key": "bank_agency_number",
											"value": "003403",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param Bank_agency_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3da9338b-ab97-46b5-81c9-a27925103852",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&bank_agency_number=003403",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										},
										{
											"key": "bank_agency_number",
											"value": "003403"
										},
										{
											"key": "bank_account_number",
											"value": "0013000706",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Consulta de deposito Perfil Cliente param Bank_account_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50469b81-1262-4825-871c-81dd5791dbbc",
										"exec": [
											"\r",
											"pm.test(\"Status code is 'OK''\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											" pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"/*\r",
											"var dataConciliation_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the conciliation_id is present - ID: \" +dataConciliation_id.content[0].conciliation_id, () => {\r",
											"    pm.expect(dataConciliation_id.content[0].conciliation_id).to.equal(215750215);\r",
											"});   \r",
											" \r",
											"var dataInsert_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the insert_date is present - equal to: \" +dataInsert_date.content[0].insert_date, () => {\r",
											"    pm.expect(dataInsert_date.content[0].insert_date).to.equal(\"2018-03-05T03:51:04Z\");\r",
											"}); */\r",
											"\r",
											"var dataTef_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tef_nsu is present and is --> \" +dataTef_nsu.content[0].tef_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTef_nsu.content[0].tef_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_nsu = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_nsu is present and is --> \" +dataAcquirer_nsu.content[0].acquirer_nsu+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_nsu.content[0].acquirer_nsu).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAuthorization_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the authorization_code is present and is --> \" +dataAuthorization_code.content[0].authorization_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAuthorization_code.content[0].authorization_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataOrigin_code = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the origin_code is present and is --> \" +dataOrigin_code.content[0].origin_code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrigin_code.content[0].origin_code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTid = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tid is present and is --> \" +dataTid.content[0].tid+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTid.content[0].tid).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataTerminal_number = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the terminal_number is present and is --> \" +dataTerminal_number.content[0].terminal_number+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTerminal_number.content[0].terminal_number).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_id is present and is --> \" +dataAcquirer_trs_id.content[0].acquirer_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_id.content[0].acquirer_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirer_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_trs_date is present and is --> \" +dataAcquirer_trs_date.content[0].acquirer_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_trs_date.content[0].acquirer_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_id = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_id is present and is --> \" +dataStore_trs_id.content[0].store_trs_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataStore_trs_date = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_trs_date is present and is --> \" +dataStore_trs_id.content[0].store_trs_date+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_trs_id.content[0].store_trs_date).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerId = JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer ID is present and is --> \" +dataAcquirerId.content[0].acquirer.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerId.content[0].acquirer.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer NAME is present and is --> \" +dataAcquirerName.content[0].acquirer.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerName.content[0].acquirer.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataAcquirerCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer CODE is present and is --> \" +dataAcquirerCode.content[0].acquirer.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirerCode.content[0].acquirer.code).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND ID is present and is --> \" +dataBrandId.content[0].brand.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandId.content[0].brand.id).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND NAME is present and is --> \" +dataBrandName.content[0].brand.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandName.content[0].brand.name).not.to.equal(null);\r",
											"}); \r",
											"\r",
											"var dataBrandCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the BRAND code is present and is --> \" +dataBrandCode.content[0].brand.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBrandCode.content[0].brand.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY ID is present and is --> \" +dataModalityId.content[0].modality.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityId.content[0].modality.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataModalityName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the MODALITY NAME is present and is --> \" +dataModalityName.content[0].modality.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataModalityName.content[0].modality.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataCapture_type= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the capture_type is present and is --> \" +dataCapture_type.content[0].capture_type+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCapture_type.content[0].capture_type).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataOrder_id= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the order_id is present and is --> \" +dataOrder_id.content[0].order_id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataOrder_id.content[0].order_id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreId= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE ID is present and is --> \" +dataStoreId.content[0].store.id+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreId.content[0].store.id).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreName= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE NAME is present and is --> \" +dataStoreName.content[0].store.name+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreName.content[0].store.name).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCode= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CODE is present and is --> \" +dataStoreCode.content[0].store.code+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCode.content[0].store.code).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataStoreCnpj= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the STORE CNPJ is present and is --> \" +dataStoreCnpj.content[0].store.cnpj+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStoreCnpj.content[0].store.cnpj).not.to.equal(null);\r",
											"});\r",
											"\r",
											"var dataAmount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the AMOUNT is present and is --> \" +dataAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAmount.content[0].amount).not.to.equal(null);\r",
											"});\r",
											"\r",
											"/*\r",
											"var validaTipoAmount = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object AMOUNT --> \" +validaTipoAmount.content[0].amount+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipoAmount.content[0].amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute AMOUNT has been validated is number\")\r",
											"    }  });*/\r",
											"\r",
											"\r",
											"var dataCurrency= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the CURRENCY is present and is --> \" +dataCurrency.content[0].currency+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCurrency.content[0].currency).not.to.equal(\"\");\r",
											"\r",
											"});\r",
											"\r",
											"var validaTipo = JSON.parse(responseBody);\r",
											"pm.test(\"Validates the type of the object CURRENCY --> \" +validaTipo.content[0].currency+\"\\ and not empty\", () => {\r",
											"    if(pm.expect(validaTipo.content[0].currency).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute CURENCY has been validated is String\")\r",
											"    }  });\r",
											"/*\r",
											"var dataInstallment= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installment is present and type is Number --> \" +dataInstallment.content[0].installment+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment.content[0].installment).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment.content[0].installment).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"var dataNumber_installments= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the installments is present and type is Number --> \" +dataNumber_installments.content[0].number_installments+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).not.to.equal(\"\");\r",
											"    pm.expect(dataNumber_installments.content[0].number_installments).to.be.a('number');\r",
											"});\r",
											"\r",
											"var dataStore_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the store_status is present and type is String --> \" +dataStore_status.content[0].store_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataStore_status.content[0].store_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataStore_status.content[0].store_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute store_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataAcquirer_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the acquirer_status is present and type is String --> \" +dataAcquirer_status.content[0].acquirer_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAcquirer_status.content[0].acquirer_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataAcquirer_status.content[0].acquirer_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute acquirer_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMv_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Mv_status is present and type is String --> \" +dataMv_status.content[0].mv_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMv_status.content[0].mv_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMv_status.content[0].mv_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute Mv_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataMf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the mf_status is present and type is String --> \" +dataMf_status.content[0].mf_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataMf_status.content[0].mf_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataMf_status.content[0].mf_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute mf_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var dataEf_status= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the ef_status is present and type is String --> \" +dataEf_status.content[0].ef_status+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataEf_status.content[0].ef_status).not.to.equal(\"\");\r",
											"    if (pm.expect(dataEf_status.content[0].ef_status).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute ef_status has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataEf_status.content[0].fee+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee.content[0].fee).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee.content[0].fee).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataFee_amount= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the Fee is present and type is Number --> \" +dataFee_amount.content[0].fee_amount+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataFee_amount.content[0].fee_amount).not.to.equal(\"\");\r",
											"    if (pm.expect(dataFee_amount.content[0].fee_amount).to.be.a('number')){\r",
											"        pm.test(\"The type of the attribute Fee has been validated is Number\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataTax_coupon= JSON.parse(responseBody);\r",
											"pm.test(\"Validate if the tax_coupon is present and type is String --> \" +dataTax_coupon.content[0].tax_coupon+\"\\ and not empty\", () => {\r",
											"    pm.expect(dataTax_coupon.content[0].tax_coupon).not.to.equal(\"\");\r",
											"    if (pm.expect(dataTax_coupon.content[0].tax_coupon).to.be.a('string')){\r",
											"        pm.test(\"The type of the attribute tax_coupon has been validated is String\")\r",
											"    }\r",
											"});\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataContentReceipt_prevision_id = dataResponse.content[0].receipt_prevision_id;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_id is present and type is number --> \" + dataContentReceipt_prevision_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataContentReceipt_prevision_id).not.to.equal(\"\");\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.be.a('number');\r",
											"    pm.expect(dataContentReceipt_prevision_id).to.equal(dataResponse.content[0].receipt_prevision_id);\r",
											"    });\r",
											"\r",
											"var dataResponse = JSON.parse(responseBody);\r",
											"const dataReceipt_prevision_date = dataResponse.content[0].receipt_prevision_date;\r",
											"    pm.test(\"Validate if the attribute receipt_prevision_date is present and type is String --> \" + dataReceipt_prevision_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_prevision_date).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_prevision_date).to.be.a('string');\r",
											"      pm.expect(dataReceipt_prevision_date).to.equal(dataResponse.content[0].receipt_prevision_date);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"const dataPrevision_payment_date = dataResponse.content[0].prevision_payment_date;\r",
											"    pm.test(\"Validate if the attribute prevision_payment_date is present and type is String --> \" + dataPrevision_payment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPrevision_payment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPrevision_payment_date).to.be.a('string');\r",
											"      pm.expect(dataPrevision_payment_date).to.equal(dataResponse.content[0].prevision_payment_date);\r",
											"    });*/\r",
											"\r",
											"    \r",
											"        var dataResponse = JSON.parse(responseBody);\r",
											"const dataGross_amount = dataResponse.content[0].gross_amount;\r",
											"    pm.test(\"Validate if the attribute gross_amount is present and type is number --> \" + dataGross_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataGross_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataGross_amount).to.be.a('number');\r",
											"      pm.expect(dataGross_amount).to.equal(dataResponse.content[0].gross_amount);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCommission_amount = dataResponse.content[0].commission_amount;\r",
											"    pm.test(\"Validate if the attribute commission_amount is present and type is number --> \" + dataCommission_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCommission_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCommission_amount).to.be.a('number');\r",
											"    pm.expect(dataCommission_amount).to.equal(dataResponse.content[0].commission_amount);\r",
											"    });\r",
											"\r",
											"/*\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRejected_amount = dataResponse.content[0].rejected_amount;\r",
											"    pm.test(\"Validate if the attribute rejected_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRejected_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataRejected_amount).to.be.a('number');\r",
											"    pm.expect(dataRejected_amount).to.equal(dataResponse.content[0].rejected_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const datanet_amount = dataResponse.content[0].net_amount;\r",
											"    pm.test(\"Validate if the attribute net_amount is present and type is number --> \" + dataRejected_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(datanet_amount).not.to.equal(\"\");\r",
											"    pm.expect(datanet_amount).to.be.a('number');\r",
											"    pm.expect(datanet_amount).to.equal(dataResponse.content[0].net_amount);\r",
											"    });*/\r",
											"\r",
											"      var dataResponse = JSON.parse(responseBody);\r",
											"    const dataCredit_amount = dataResponse.content[0].credit_amount;\r",
											"    pm.test(\"Validate if the attribute credit_amount is present and type is number --> \" + dataCredit_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataCredit_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataCredit_amount).to.be.a('number');\r",
											"    pm.expect(dataCredit_amount).to.equal(dataResponse.content[0].credit_amount);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataAdjusted_amount = dataResponse.content[0].adjusted_amount;\r",
											"    pm.test(\"Validate if the attribute adjusted_amount is present and type is number --> \" + dataAdjusted_amount +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataAdjusted_amount).not.to.equal(\"\");\r",
											"    pm.expect(dataAdjusted_amount).to.be.a('number');\r",
											"    pm.expect(dataAdjusted_amount).to.equal(dataResponse.content[0].adjusted_amount);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_code = dataResponse.content[0].bank_account.code;\r",
											"    pm.test(\"Validate if the attribute bank_account.code is present and type is String --> \" + dataBank_account_code +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_code).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_code).to.be.a('string');\r",
											"    pm.expect(dataBank_account_code).to.equal(dataResponse.content[0].bank_account.code);\r",
											"    });\r",
											"\r",
											"  var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_agency_number = dataResponse.content[0].bank_account.agency_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.agency_number is present and type is String --> \" + dataBank_account_agency_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_agency_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_agency_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_agency_number).to.equal(dataResponse.content[0].bank_account.agency_number);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_number = dataResponse.content[0].bank_account.account_number;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_number is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_number).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_number).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_number).to.equal(dataResponse.content[0].bank_account.account_number);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataBank_account_account_digit = dataResponse.content[0].bank_account.account_digit;\r",
											"    pm.test(\"Validate if the attribute bank_account.account_digit is present and type is String --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataBank_account_account_digit).not.to.equal(\"\");\r",
											"    pm.expect(dataBank_account_account_digit).to.be.a('string');\r",
											"    pm.expect(dataBank_account_account_digit).to.equal(dataResponse.content[0].bank_account.account_digit);\r",
											"    });\r",
											"\r",
											"/*\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_accepted = dataResponse.content[0].qtd_transactions_accepted;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_accepted is present and type is Number --> \" + dataBank_account_account_number +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_accepted).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_accepted).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_accepted).to.equal(dataResponse.content[0].qtd_transactions_accepted);\r",
											"    });\r",
											"\r",
											"   var dataResponse = JSON.parse(responseBody);\r",
											"    const dataQtd_transactions_rejected = dataResponse.content[0].qtd_transactions_rejected;\r",
											"    pm.test(\"Validate if the attribute qtd_transactions_rejected is present and type is Number --> \" + dataQtd_transactions_rejected +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataQtd_transactions_rejected).not.to.equal(\"\");\r",
											"    pm.expect(dataQtd_transactions_rejected).to.be.a('Number');\r",
											"    pm.expect(dataQtd_transactions_rejected).to.equal(dataResponse.content[0].qtd_transactions_rejected);\r",
											"    });\r",
											"\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallments = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallments +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallments).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallments).to.be.a('Number');\r",
											"    pm.expect(dataInstallments).to.equal(dataResponse.content[0].installments);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataInstallment11 = dataResponse.content[0].installments;\r",
											"    pm.test(\"Validate if the attribute installments is present and type is Number --> \" + dataInstallment11 +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataInstallment11).not.to.equal(\"\");\r",
											"    pm.expect(dataInstallment11).to.be.a('Number');\r",
											"    pm.expect(dataInstallment11).to.equal(dataResponse.content[0].installment);\r",
											"    });\r",
											"\r",
											"       var dataResponse = JSON.parse(responseBody);\r",
											"    const dataReceipt_file_id = dataResponse.content[0].receipt_file_id;\r",
											"    pm.test(\"Validate if the attribute receipt_file_id is present and type is Number --> \" + dataReceipt_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataReceipt_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataReceipt_file_id).to.be.a('Number');\r",
											"    pm.expect(dataReceipt_file_id).to.equal(dataResponse.content[0].receipt_file_id);\r",
											"    });\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataSettlement_file_id = dataResponse.content[0].settlement_file_id;\r",
											"    pm.test(\"Validate if the attribute settlement_file_id is present and type is Number --> \" + dataSettlement_file_id +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataSettlement_file_id).not.to.equal(\"\");\r",
											"    pm.expect(dataSettlement_file_id).to.be.a('Number');\r",
											"    pm.expect(dataSettlement_file_id).to.equal(dataResponse.content[0].settlement_file_id);\r",
											"    });\r",
											"\r",
											" var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPlan_type = dataResponse.content[0].plan_type;\r",
											"    pm.test(\"Validate if the attribute plan_type is present and type is Number --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPlan_type).not.to.equal(\"\");\r",
											"    pm.expect(dataPlan_type).to.be.a('String');\r",
											"    pm.expect(dataPlan_type).to.equal(dataResponse.content[0].plan_type);\r",
											"    });\r",
											"\r",
											"     var dataResponse = JSON.parse(responseBody);\r",
											"    const dataRv_number = dataResponse.content[0].rv_number;\r",
											"    pm.test(\"Validate if the attribute rv_number is present and type is String --> \" + dataPlan_type +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataRv_number).not.to.equal(\"\");\r",
											"    pm.expect(dataRv_number).to.be.a('String');\r",
											"    pm.expect(dataRv_number).to.equal(dataResponse.content[0].rv_number);\r",
											"    });*/\r",
											"\r",
											"    var dataResponse = JSON.parse(responseBody);\r",
											"    const dataPayment_date = dataResponse.content[0].payment_date;\r",
											"    pm.test(\"Validate if the attribute payment_date is present and type is String --> \" + dataPayment_date +\"\\ and not empty\", () => {\r",
											"    pm.expect(dataPayment_date).not.to.equal(\"\");\r",
											"    pm.expect(dataPayment_date).to.be.a('String');\r",
											"    pm.expect(dataPayment_date).to.equal(dataResponse.content[0].payment_date);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "chain_id",
										"type": "text",
										"value": "4700",
										"disabled": true
									},
									{
										"key": "company_id",
										"type": "text",
										"value": "44072",
										"disabled": true
									},
									{
										"key": "store_id",
										"type": "text",
										"value": "82130",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/deposits?chain_id=4700&begin_payment_date=2018-01-01&end_payment_date=2018-01-02&bank_account_number=0013000706",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "chain_id",
											"value": "4700"
										},
										{
											"key": "begin_payment_date",
											"value": "2018-01-01"
										},
										{
											"key": "end_payment_date",
											"value": "2018-01-02"
										},
										{
											"key": "company_id",
											"value": "44072",
											"disabled": true
										},
										{
											"key": "acquire_id",
											"value": "4",
											"disabled": true
										},
										{
											"key": "brand_id",
											"value": "4502",
											"disabled": true
										},
										{
											"key": "modality_id",
											"value": "4469",
											"disabled": true
										},
										{
											"key": "order_id",
											"value": "02-658876973",
											"disabled": true
										},
										{
											"key": "mf_status",
											"value": "AUTOMATICALLY_CONCILIATED",
											"disabled": true
										},
										{
											"key": "rv_num",
											"value": "945267106",
											"disabled": true
										},
										{
											"key": "plan_type",
											"value": "INSTALLMENT_WITHOUT_INTEREST",
											"disabled": true
										},
										{
											"key": "bank_code",
											"value": "033",
											"disabled": true
										},
										{
											"key": "bank_agency_number",
											"value": "003403",
											"disabled": true
										},
										{
											"key": "bank_account_number",
											"value": "0013000706"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "590c2fb0-da76-45ce-9970-e198f57a8f9e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7092387-6c7d-4593-9c9d-068343ad473a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Distribuidor",
					"item": [
						{
							"name": "Gerar Token Perfil DISTRIBUIDOR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb601458-bbda-4750-8755-4ba8f83ce0a2",
										"exec": [
											"var tokenPerfilDistribuidor = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilDistribuidor\", tokenPerfilDistribuidor.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_distribuidor\",\r\n    \"password\":\"auttar@1234\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f0d2263-34e1-4a89-b3a6-736a73a58770",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "65b8beee-7cb4-499b-9c82-b5afafe9b6f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Perfil Glojas",
					"item": [
						{
							"name": "Gerar Token Perfil GRUPO LOJAS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b63a4fe0-16d7-4814-bba9-1195260597fc",
										"exec": [
											"var tokenPerfilGLojas = JSON.parse(responseBody);\r",
											"pm.globals.set(\"tokenPerfilGLojas\", tokenPerfilGLojas.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"teste_automatizado_glojas2\", \r\n    \"password\":\"auttar@123\"\r\n}"
								},
								"url": {
									"raw": "https://api-hg.getnet.com.br:8443/conciliation/v1/authorizations",
									"protocol": "https",
									"host": [
										"api-hg",
										"getnet",
										"com",
										"br"
									],
									"port": "8443",
									"path": [
										"conciliation",
										"v1",
										"authorizations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7a46d635-2548-4985-8830-c43f72a3850c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6fdb84f0-e208-4a61-83ba-db427c6d0194",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "da23b0c6-0399-4776-8f7a-3228bec9531a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "90ab6ea6-d3f2-4bff-a6fa-3787b06527ed",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}