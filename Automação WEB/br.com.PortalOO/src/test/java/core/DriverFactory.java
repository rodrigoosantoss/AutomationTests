package core;

import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

/**
 * This class is where the first configurations of Selenium are made. Here you can set the driver that
 * will be used with Selenium and it's location
 */
public class DriverFactory {

	private static WebDriver driver;
	public DriverFactory() {}

	/**
	 * Here is where you can set up the Driver Configurations for Selenium.
	 * @return
	 */
	public static WebDriver getDriver() {
		
		if(driver == null) {
			switch (ProjectProperties.browser) {
			case CHROME:
				if (System.getProperty("os.name").equals("Linux")){
					System.setProperty("webdriver.chrome.driver", "./src/main/resources/drivers/chromedriver");
				} else {
					System.setProperty("webdriver.chrome.driver", "./src/main/resources/drivers/chromedriver.exe");
				}

				ChromeOptions chromeOptions = new ChromeOptions();
				HashMap<String, Object> preferences = new HashMap<String, Object>();
				preferences.put("profile.default_content_settings.popups", 0);
				preferences.put("download.default_directory", System.getProperty("user.dir")+"\\src\\test\\resources\\Downloads");
				chromeOptions.setExperimentalOption("prefs", preferences);
				DesiredCapabilities cap = DesiredCapabilities.chrome();
				cap.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
				cap.setCapability(ChromeOptions.CAPABILITY, chromeOptions);
				driver = new ChromeDriver(chromeOptions);
				driver.manage().window().setSize(new Dimension(1024, 768));
//				driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);
				break;
			case FIREFOX:
				System.setProperty("webdriver.gecko.driver", "./src/main/resources/drivers/geckodriver.exe");
				driver = new FirefoxDriver();
				driver.manage().window().setSize(new Dimension(1024, 768));
				driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);

				break;
			case EDGE:
				if (System.getProperty("os.name").toLowerCase().contains("windows")) {
					driver = new EdgeDriver();
				}else{
					System.err.println("Não é possivel utilizar este driver para automação na atual versão do Framework.");
					throw new RuntimeException("Não é possivel utilizar este driver para automação na atual versão do Framework." +
							"\nDriver: "+ ProjectProperties.browser+"" +
							"\nOS: "+System.getProperty("os.name"));
				}
				break;
			}
		}
		return driver;
	}

	/**
	 * This method is to kill the proccess generated by Selenium.
	 */
	public static void killDriver() {
		if(driver != null) {
			driver.quit();
			driver = null;
		}
	}
	
}
